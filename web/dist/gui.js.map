{
  "version": 3,
  "sources": ["../src/util.ts", "../src/nerd.ts", "../src/widgets.ts", "../src/gui.ts"],
  "sourcesContent": ["// Utility Functions\n\n// $() creates an HTMLElement from a template string\n// Strips whitespace for cleaner template literals\nconst _dollarRegexp = /^\\s+|\\s+$|(?<=\\>)\\s+(?=\\<)/gm\nexport function $(html: string): HTMLElement {\n\tconst template = document.createElement(\"template\")\n\ttemplate.innerHTML = html.replace(_dollarRegexp, \"\")\n\tconst result = template.content.firstElementChild\n\treturn result as HTMLElement\n}\n", "// Nerd Framework - Core types and base classes\n\nimport { imsg } from \"./imsg.js\"\n\n// TreeEntry represents a node and its children - Must match api/msg/types.go\nexport interface TreeEntry {\n  nodeId: number\n  name: string\n  children: TreeEntry[]\n}\n\n// Component provides base functionality for all custom elements\n// Uses global style injection rather than shadow DOM for simplicity\nexport class Component extends HTMLElement {\n  static style = \"\"\n\n  // register creates a global style tag and defines the custom element\n  static register(name: string) {\n    const styleElement = document.createElement(\"style\")\n    styleElement.textContent = this.style\n    document.head.appendChild(styleElement)\n    customElements.define(name, this)\n  }\n}\n\n// GUI is forward-declared here to avoid circular dependency\n// The actual implementation is in gui.ts\n// GUIState is also forward-declared for the state field\nexport interface GUIState {\n  workbench: any\n}\n\nexport interface GUI {\n  state: GUIState\n  SwitchToAuth(): void\n  SwitchToWorkbench(userId: number): void\n}\n\n// Global singleton GUI instance - set during GUI.connectedCallback()\n// Uses undefined as unknown to avoid exclamation marks throughout code\nexport let gui = undefined as unknown as GUI\n\nexport function SetGUI(instance: GUI) {\n  gui = instance\n}\n\n// Ask sends an API message to the server and returns the response payload\n// Throws on HTTP errors or network failures\n// On 401 Unauthorized, triggers auth mode switch for security\nexport async function Ask(\n  type: imsg,\n  targetId: number,\n  pl: any = {},\n): Promise<any> {\n  const response = await fetch(\"/api\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ type, targetId, payload: pl }),\n  })\n\n  if (!response.ok) {\n    if (response.status === 401) {\n      gui.SwitchToAuth()\n    }\n    throw new Error((await response.text()) || \"Request failed\")\n  }\n\n  return await response.json()\n}\n\n// AskAuth sends an authentication message to the server\n// Used for login, registration, and logout\nexport async function AskAuth(type: imsg, pl: any): Promise<any> {\n  const response = await fetch(\"/auth\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ type, payload: pl }),\n  })\n\n  if (!response.ok) {\n    throw new Error((await response.text()) || \"Request failed\")\n  }\n\n  return await response.json()\n}\n", "// Widgets - Reusable UI primitives used across multiple components\n\nimport * as nerd from \"./nerd.js\"\n\n// Action renders a clickable link-styled button\nexport class Action extends nerd.Component {\n  static style = `\n\t\tnerd-action {\n\t\t\tdisplay: inline;\n\t\t\tbackground: none;\n\t\t\tborder: none;\n\t\t\tcolor: #0066cc;\n\t\t\ttext-decoration: underline;\n\t\t\tcursor: pointer;\n\t\t\tpadding: 0;\n\t\t\tfont: inherit;\n\t\t}\n\n\t\tnerd-action:hover {\n\t\t\tcolor: #0052a3;\n\t\t}\n\t`\n}\n\n// Register all widgets\nAction.register(\"nerd-action\")\n", "// Nerd GUI - Personal Software Agent Graphical User Interface\n\nimport { imsg } from \"./imsg.js\"\nimport { $ } from \"./util.js\"\nimport * as nerd from \"./nerd.js\"\nimport \"./widgets.js\" // Side effect: registers widget components\n\n// Node represents a node in the in-memory tree structure\n// Forms a bidirectional tree with parent/children links\nclass Node {\n  id: number\n  name: string\n  parent: Node | null\n  children: Node[]\n  elements: HTMLElement[] // DOM elements for each render (multiple trees/boards)\n\n  constructor(id: number, name: string, parent: Node | null = null) {\n    this.id = id\n    this.name = name\n    this.parent = parent\n    this.children = []\n    this.elements = []\n  }\n\n  // addChild creates child node and establishes bidirectional link\n  addChild(id: number, name: string): Node {\n    const child = new Node(id, name, this)\n    this.children.push(child)\n    return child\n  }\n\n  // render creates and appends a new DOM element to container\n  // recursively renders children unless this node is in the config's stop list\n  // returns the created element for potential future reference\n  render(container: HTMLElement, config: ListTreeConfig): HTMLElement {\n    const element = $(`<div class=\"nerd-entity\">${this.name}</div>`)\n    this.elements.push(element)\n    container.appendChild(element)\n\n    if (!config.stopList.has(this.id)) {\n      const childContainer = $(`<div class=\"nerd-children\"></div>`)\n      element.appendChild(childContainer)\n      for (const child of this.children) {\n        child.render(childContainer, config)\n      }\n    }\n\n    return element\n  }\n}\n\n// ListTreeConfig configures a single ListTree instance\nclass ListTreeConfig {\n  root: Node\n  stopList: Set<number> // Node IDs to stop rendering at\n\n  constructor(root: Node) {\n    this.root = root\n    this.stopList = new Set()\n  }\n}\n\n// BoardConfig holds configuration for all ListTrees on a board\nclass BoardConfig {\n  listTrees: ListTreeConfig[]\n\n  constructor() {\n    this.listTrees = []\n  }\n}\n\n// WorkbenchConfig holds configuration for all boards in the workbench\nclass WorkbenchConfig {\n  boards: BoardConfig[]\n\n  constructor() {\n    this.boards = [new BoardConfig(), new BoardConfig()]\n  }\n}\n\n// GUIState holds the complete state of the GUI display configuration\nclass GUIState {\n  workbench: WorkbenchConfig\n\n  constructor() {\n    this.workbench = new WorkbenchConfig()\n  }\n}\n\n// ListTree renders a tree as a hierarchical list of block elements\n// This is a dynamic/adaptive custom element\nclass ListTree extends nerd.Component {\n  static style = `\n\t\tnerd-list-tree {\n\t\t\tdisplay: block;\n\t\t}\n\n\t\tnerd-list-tree .nerd-entity {\n\t\t\tpadding: 0.25em;\n\t\t}\n\n\t\tnerd-list-tree .nerd-children {\n\t\t\tpadding-left: 1em;\n\t\t}\n\t`\n\n  config: ListTreeConfig | null = null\n\n  // SetConfig configures which tree to display\n  SetConfig(config: ListTreeConfig) {\n    this.config = config\n    this.render()\n  }\n\n  // render displays the tree using block layout\n  private render() {\n    if (!this.config) return\n\n    this.innerHTML = \"\"\n    this.config.root.render(this, this.config)\n  }\n}\n\n// Parts are application-specific structural components\n\n// Header displays the app title and logout action\nclass Header extends nerd.Component {\n  static style = `\n\t\tnerd-header {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tbackground: #2c3e50;\n\t\t\tcolor: white;\n\t\t\tpadding: 1rem;\n\t\t\tfont-size: 1.2rem;\n\t\t\tfont-weight: bold;\n\t\t}\n\n\t\tnerd-header nerd-action {\n\t\t\tcolor: white;\n\t\t}\n\n\t\tnerd-header nerd-action:hover {\n\t\t\tcolor: #ddd;\n\t\t}\n\t`\n\n  static html = `\n\t\t<span>Nerd - Personal Software Agent Framework</span>\n\t\t<nerd-action class=\"logout\">Logout</nerd-action>\n\t`\n\n  // Header instance fields\n  private logoutButton!: HTMLElement\n\n  connectedCallback() {\n    this.innerHTML = Header.html\n    this.logoutButton = this.querySelector(\".logout\")!\n    this.logoutButton.addEventListener(\"click\", () => this.logout())\n  }\n\n  // logout clears the HttpOnly cookie on the server and updates UI to show auth screen\n  private async logout() {\n    try {\n      await nerd.AskAuth(imsg.Logout, {})\n      nerd.gui.SwitchToAuth()\n    } catch (err) {\n      console.error(\"Logout failed:\", err)\n    }\n  }\n}\n\nclass Footer extends nerd.Component {\n  static style = `\n\t\tnerd-footer {\n\t\t\tdisplay: block;\n\t\t\tbackground: #2c3e50;\n\t\t\tcolor: white;\n\t\t\tpadding: 1rem;\n\t\t\ttext-align: center;\n\t\t}\n\t`\n\n  static html = `\n\t\tFooter\n\t`\n\n  connectedCallback() {\n    this.innerHTML = Footer.html\n  }\n}\n\n// Workbench is the main authenticated UI with header, footer, and two board areas\n// The board areas are placeholders for future agent interaction interfaces\nclass Workbench extends nerd.Component {\n  static style = `\n\t\tnerd-workbench {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: 1fr 1fr;\n\t\t\tgrid-template-rows: auto 1fr auto;\n\t\t\tgrid-template-areas:\n\t\t\t\t\"header header\"\n\t\t\t\t\"left right\"\n\t\t\t\t\"footer footer\";\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t}\n\n\t\tnerd-workbench nerd-header {\n\t\t\tgrid-area: header;\n\t\t}\n\n\t\tnerd-workbench .board.left {\n\t\t\tgrid-area: left;\n\t\t\tborder: 1px solid #ddd;\n\t\t}\n\n\t\tnerd-workbench .board.right {\n\t\t\tgrid-area: right;\n\t\t\tborder: 1px solid #ddd;\n\t\t}\n\n\t\tnerd-workbench nerd-footer {\n\t\t\tgrid-area: footer;\n\t\t}\n\t`\n\n  static html = `\n\t\t<nerd-header></nerd-header>\n\t\t<div class=\"board left\"></div>\n\t\t<div class=\"board right\"></div>\n\t\t<nerd-footer></nerd-footer>\n\t`\n\n  // Workbench instance fields\n  private boardElements: HTMLElement[] = []\n\n  connectedCallback() {\n    this.innerHTML = Workbench.html\n    // Cache all board elements in order\n    this.boardElements = [\n      this.querySelector(\".board.left\")!,\n      this.querySelector(\".board.right\")!,\n    ]\n  }\n\n  // renderBoards renders all trees on all boards using ListTree elements\n  // Uses GUI state to determine what to render\n  renderBoards() {\n    const workbenchConfig = nerd.gui.state.workbench\n\n    // Render each board\n    for (let i = 0; i < this.boardElements.length; i++) {\n      const board = this.boardElements[i]\n      const boardConfig = workbenchConfig.boards[i]\n\n      // Clear container\n      board.innerHTML = \"\"\n\n      // Render all ListTrees for this board\n      for (const config of boardConfig.listTrees) {\n        const listTree = document.createElement(\"nerd-list-tree\") as ListTree\n        listTree.SetConfig(config)\n        board.appendChild(listTree)\n      }\n    }\n  }\n}\n\n// Auth provides login and registration forms with toggle between modes\n// Automatically logs in user after successful registration\nclass Auth extends nerd.Component {\n  static style = `\n\t\tnerd-auth {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t}\n\n\t\tnerd-auth .auth-box {\n\t\t\twidth: 20em;\n\t\t\tpadding: 1.5em;\n\t\t\tborder: 1px solid #ddd;\n\t\t\tborder-radius: 0.5em;\n\t\t\tbackground: white;\n\t\t}\n\n\t\tnerd-auth form {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tgap: 0.666em;\n\t\t}\n\n\t\tnerd-auth .error {\n\t\t\tmargin-top: 1em;\n\t\t}\n\t`\n\n  static html = `\n\t\t<div class=\"auth-box\">\n\t\t\t<form class=\"login\">\n\t\t\t\t<h2>Login</h2>\n\t\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n\t\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n\t\t\t\t<button type=\"submit\">Login</button>\n\t\t\t\t<nerd-action class=\"toggle\">Need an account? Register</nerd-action>\n\t\t\t</form>\n\t\t\t<form class=\"register hidden\">\n\t\t\t\t<h2>Create Account</h2>\n\t\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n\t\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n\t\t\t\t<button type=\"submit\">Register</button>\n\t\t\t\t<nerd-action class=\"toggle\">Have an account? Login</nerd-action>\n\t\t\t</form>\n\t\t\t<div class=\"error\"></div>\n\t\t</div>\n\t`\n\n  // Auth instance fields\n  private regmode = false\n  private login = undefined as unknown as HTMLFormElement\n  private register = undefined as unknown as HTMLFormElement\n  private error = undefined as unknown as HTMLDivElement\n  private loginToggle = undefined as unknown as HTMLElement\n  private registerToggle = undefined as unknown as HTMLElement\n\n  connectedCallback() {\n    this.innerHTML = Auth.html\n    this.login = this.querySelector(\".login\")!\n    this.register = this.querySelector(\".register\")!\n    this.error = this.querySelector(\".error\")!\n    this.loginToggle = this.login.querySelector(\".toggle\")!\n    this.registerToggle = this.register.querySelector(\".toggle\")!\n    this.attachEventListeners()\n  }\n\n  private attachEventListeners() {\n    this.login.addEventListener(\"submit\", (e) => this.handleSubmit(e, false))\n    this.register.addEventListener(\"submit\", (e) => this.handleSubmit(e, true))\n    this.loginToggle.addEventListener(\"click\", () => this.toggleMode())\n    this.registerToggle.addEventListener(\"click\", () => this.toggleMode())\n  }\n\n  // toggleMode switches between login and registration forms\n  private toggleMode() {\n    this.regmode = !this.regmode\n    this.login.classList.toggle(\"hidden\")\n    this.register.classList.toggle(\"hidden\")\n  }\n\n  // handleSubmit sends credentials to server and updates app state on success\n  private async handleSubmit(e: Event, regmode: boolean) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const pl = Object.fromEntries(formData)\n\n    try {\n      const a = await nerd.AskAuth(\n        regmode ? imsg.CreateUser : imsg.AuthenticateUser,\n        pl,\n      )\n      nerd.gui.SwitchToWorkbench(a.userid)\n    } catch (err) {\n      this.showError(\n        err instanceof Error ? err.message : \"Network error. Please try again.\",\n      )\n    }\n  }\n\n  private showError(error: string) {\n    this.error.textContent = error\n  }\n}\n\n// GUI is the root component that manages authentication state\n// Shows Auth component when userId is 0, otherwise shows Workbench\n// userId is injected by server via template replacement in index.html\nclass GUI extends nerd.Component {\n  static style = `\n\t\t@font-face {\n\t\t\tfont-family: 'Inter';\n\t\t\tsrc: url('/fonts/InterVariable.woff2');\n\t\t\tfont-weight: 100 900;\n\t\t\tfont-display: block;\n\t\t}\n\n\t\tbody {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\th2 {\n\t\t\tmargin: 0 0 0.25em 0;\n\t\t\tfont-size: 1.5em;\n\t\t}\n\n\t\t.error {\n\t\t\tcolor: red;\n\t\t}\n\n\t\tnerd-gui {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t\tfont-family: 'Inter';\n\t\t\tbackground: #fafafa;\n\t\t}\n\n\t\t.hidden {\n\t\t\tdisplay: none;\n\t\t}\n\t`\n\n  static html = `\n\t\t<nerd-workbench></nerd-workbench>\n\t`\n\n  // GUI instance fields\n  userId: number = 0\n  admin: boolean = false\n  state: GUIState = new GUIState()\n  private auth = document.createElement(\"nerd-auth\")\n  private workbench = undefined as unknown as Workbench\n  private nodes = new Map<number, Node>() // Fast lookup by ID\n  private rootNode: Node | null = null\n\n  connectedCallback() {\n    this.userId = parseInt(this.getAttribute(\"userid\")!, 10)\n    this.admin = this.getAttribute(\"admin\") === \"true\"\n    nerd.SetGUI(this) // Register as singleton for global access\n    this.innerHTML = GUI.html\n    this.workbench = this.querySelector(\"nerd-workbench\")!\n    this.updateAuthState()\n  }\n\n  // SwitchToAuth clears all sensitive data and shows authentication UI\n  // Called on logout, session expiry, or authentication failure\n  SwitchToAuth() {\n    // Clear all sensitive information\n    this.userId = 0\n    this.nodes.clear()\n    this.rootNode = null\n    this.state = new GUIState()\n\n    this.workbench.classList.add(\"hidden\")\n    this.appendChild(this.auth)\n  }\n\n  // SwitchToWorkbench sets user ID, hides auth, and loads workbench\n  // Called after successful authentication\n  SwitchToWorkbench(userId: number) {\n    this.userId = userId\n\n    this.workbench.classList.remove(\"hidden\")\n    this.auth.remove()\n    this.initWorkbench()\n  }\n\n  // updateAuthState toggles between auth and workbench based on userId\n  // Called on initial page load\n  updateAuthState() {\n    if (this.userId === 0) {\n      this.SwitchToAuth()\n    } else {\n      this.SwitchToWorkbench(this.userId)\n    }\n  }\n\n  // initWorkbench loads the tree and initializes the board displays\n  private async initWorkbench() {\n    try {\n      const treeEntry = await this.getTree()\n      console.log(\"TreeEntry received:\", treeEntry)\n      this.buildNodeTree(treeEntry)\n      this.setupDefaultView()\n    } catch (err) {\n      console.error(\"Failed to initialize workbench:\", err)\n      // TODO: Show error to user\n    }\n  }\n\n  // getTree fetches the tree structure from the server\n  // For admins: returns entire tree from Root\n  // For users: returns subtree rooted at user node\n  private async getTree(): Promise<nerd.TreeEntry> {\n    const targetId = this.admin ? 1 : this.userId\n    const tree = await nerd.Ask(imsg.GetTree, targetId)\n    return tree as nerd.TreeEntry\n  }\n\n  // buildNodeTree recursively builds Node tree from TreeEntry and populates nodes map\n  private buildNodeTree(\n    entry: nerd.TreeEntry,\n    parent: Node | null = null,\n  ): Node {\n    const node = new Node(entry.nodeId, entry.name, parent)\n    this.nodes.set(node.id, node)\n\n    if (parent === null) {\n      this.rootNode = node\n    } else {\n      parent.children.push(node)\n    }\n\n    if (entry.children) {\n      for (const childEntry of entry.children) {\n        this.buildNodeTree(childEntry, node)\n      }\n    }\n\n    return node\n  }\n\n  // setupDefaultView creates default board/tree configuration\n  // Default: both boards show user node with 1 level depth (children in stop list)\n  private setupDefaultView() {\n    if (!this.rootNode) return\n\n    // Find root display node (for admins, use root; for users, use their node)\n    const displayNode = this.admin ? this.rootNode : this.nodes.get(this.userId)\n    if (!displayNode) return\n\n    // Create ListTreeConfig for left board\n    const leftConfig = new ListTreeConfig(displayNode)\n    // Add immediate children to stop list (show 1 level depth)\n    for (const child of displayNode.children) {\n      leftConfig.stopList.add(child.id)\n    }\n    this.state.workbench.boards[0].listTrees.push(leftConfig)\n\n    // Create ListTreeConfig for right board (empty stop list - shows full tree)\n    const rightConfig = new ListTreeConfig(displayNode)\n    // No children added to stop list - renders entire tree recursively\n    this.state.workbench.boards[1].listTrees.push(rightConfig)\n\n    // Render both boards\n    this.workbench.renderBoards()\n  }\n}\n\n// Register all components - must happen before HTML parsing completes\n// Creates global style tags and defines custom elements\nListTree.register(\"nerd-list-tree\")\nHeader.register(\"nerd-header\")\nFooter.register(\"nerd-footer\")\nWorkbench.register(\"nerd-workbench\")\nAuth.register(\"nerd-auth\")\nGUI.register(\"nerd-gui\")\n"],
  "mappings": "AAIA,IAAMA,EAAgB,+BACf,SAASC,EAAEC,EAA2B,CAC5C,IAAMC,EAAW,SAAS,cAAc,UAAU,EAClD,OAAAA,EAAS,UAAYD,EAAK,QAAQF,EAAe,EAAE,EACpCG,EAAS,QAAQ,iBAEjC,CCGO,IAAMC,EAAN,cAAwB,WAAY,CACzC,OAAO,MAAQ,GAGf,OAAO,SAASC,EAAc,CAC5B,IAAMC,EAAe,SAAS,cAAc,OAAO,EACnDA,EAAa,YAAc,KAAK,MAChC,SAAS,KAAK,YAAYA,CAAY,EACtC,eAAe,OAAOD,EAAM,IAAI,CAClC,CACF,EAiBWE,EAEJ,SAASC,EAAOC,EAAe,CACpCF,EAAME,CACR,CAKA,eAAsBC,EACpBC,EACAC,EACAC,EAAU,CAAC,EACG,CACd,IAAMC,EAAW,MAAM,MAAM,OAAQ,CACnC,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,UAAU,CAAE,KAAAH,EAAM,SAAAC,EAAU,QAASC,CAAG,CAAC,CACtD,CAAC,EAED,GAAI,CAACC,EAAS,GACZ,MAAIA,EAAS,SAAW,KACtBP,EAAI,aAAa,EAEb,IAAI,MAAO,MAAMO,EAAS,KAAK,GAAM,gBAAgB,EAG7D,OAAO,MAAMA,EAAS,KAAK,CAC7B,CAIA,eAAsBC,EAAQJ,EAAYE,EAAuB,CAC/D,IAAMC,EAAW,MAAM,MAAM,QAAS,CACpC,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,UAAU,CAAE,KAAAH,EAAM,QAASE,CAAG,CAAC,CAC5C,CAAC,EAED,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAO,MAAMA,EAAS,KAAK,GAAM,gBAAgB,EAG7D,OAAO,MAAMA,EAAS,KAAK,CAC7B,CC/EO,IAAME,EAAN,cAA0BC,CAAU,CACzC,OAAO,MAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBjB,EAGAD,EAAO,SAAS,aAAa,EChB7B,IAAME,EAAN,MAAMC,CAAK,CACT,GACA,KACA,OACA,SACA,SAEA,YAAYC,EAAYC,EAAcC,EAAsB,KAAM,CAChE,KAAK,GAAKF,EACV,KAAK,KAAOC,EACZ,KAAK,OAASC,EACd,KAAK,SAAW,CAAC,EACjB,KAAK,SAAW,CAAC,CACnB,CAGA,SAASF,EAAYC,EAAoB,CACvC,IAAME,EAAQ,IAAIJ,EAAKC,EAAIC,EAAM,IAAI,EACrC,YAAK,SAAS,KAAKE,CAAK,EACjBA,CACT,CAKA,OAAOC,EAAwBC,EAAqC,CAClE,IAAMC,EAAUC,EAAE,4BAA4B,KAAK,IAAI,QAAQ,EAI/D,GAHA,KAAK,SAAS,KAAKD,CAAO,EAC1BF,EAAU,YAAYE,CAAO,EAEzB,CAACD,EAAO,SAAS,IAAI,KAAK,EAAE,EAAG,CACjC,IAAMG,EAAiBD,EAAE,mCAAmC,EAC5DD,EAAQ,YAAYE,CAAc,EAClC,QAAWL,KAAS,KAAK,SACvBA,EAAM,OAAOK,EAAgBH,CAAM,CAEvC,CAEA,OAAOC,CACT,CACF,EAGMG,EAAN,KAAqB,CACnB,KACA,SAEA,YAAYC,EAAY,CACtB,KAAK,KAAOA,EACZ,KAAK,SAAW,IAAI,GACtB,CACF,EAGMC,EAAN,KAAkB,CAChB,UAEA,aAAc,CACZ,KAAK,UAAY,CAAC,CACpB,CACF,EAGMC,EAAN,KAAsB,CACpB,OAEA,aAAc,CACZ,KAAK,OAAS,CAAC,IAAID,EAAe,IAAIA,CAAa,CACrD,CACF,EAGME,EAAN,KAAe,CACb,UAEA,aAAc,CACZ,KAAK,UAAY,IAAID,CACvB,CACF,EAIME,EAAN,cAA4BC,CAAU,CACpC,OAAO,MAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAcf,OAAgC,KAGhC,UAAUV,EAAwB,CAChC,KAAK,OAASA,EACd,KAAK,OAAO,CACd,CAGQ,QAAS,CACV,KAAK,SAEV,KAAK,UAAY,GACjB,KAAK,OAAO,KAAK,OAAO,KAAM,KAAK,MAAM,EAC3C,CACF,EAKMW,EAAN,MAAMC,UAAoBF,CAAU,CAClC,OAAO,MAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAqBf,OAAO,KAAO;AAAA;AAAA;AAAA,GAMN,aAER,mBAAoB,CAClB,KAAK,UAAYE,EAAO,KACxB,KAAK,aAAe,KAAK,cAAc,SAAS,EAChD,KAAK,aAAa,iBAAiB,QAAS,IAAM,KAAK,OAAO,CAAC,CACjE,CAGA,MAAc,QAAS,CACrB,GAAI,CACF,MAAWC,IAAqB,CAAC,CAAC,EAC7BC,EAAI,aAAa,CACxB,OAASC,EAAK,CACZ,QAAQ,MAAM,iBAAkBA,CAAG,CACrC,CACF,CACF,EAEMC,EAAN,MAAMC,UAAoBP,CAAU,CAClC,OAAO,MAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAUf,OAAO,KAAO;AAAA;AAAA,GAId,mBAAoB,CAClB,KAAK,UAAYO,EAAO,IAC1B,CACF,EAIMC,EAAN,MAAMC,UAAuBT,CAAU,CACrC,OAAO,MAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAgCf,OAAO,KAAO;AAAA;AAAA;AAAA;AAAA;AAAA,GAQN,cAA+B,CAAC,EAExC,mBAAoB,CAClB,KAAK,UAAYS,EAAU,KAE3B,KAAK,cAAgB,CACnB,KAAK,cAAc,aAAa,EAChC,KAAK,cAAc,cAAc,CACnC,CACF,CAIA,cAAe,CACb,IAAMC,EAAuBN,EAAI,MAAM,UAGvC,QAASO,EAAI,EAAGA,EAAI,KAAK,cAAc,OAAQA,IAAK,CAClD,IAAMC,EAAQ,KAAK,cAAcD,CAAC,EAC5BE,EAAcH,EAAgB,OAAOC,CAAC,EAG5CC,EAAM,UAAY,GAGlB,QAAWtB,KAAUuB,EAAY,UAAW,CAC1C,IAAMC,EAAW,SAAS,cAAc,gBAAgB,EACxDA,EAAS,UAAUxB,CAAM,EACzBsB,EAAM,YAAYE,CAAQ,CAC5B,CACF,CACF,CACF,EAIMC,EAAN,MAAMC,UAAkBhB,CAAU,CAChC,OAAO,MAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA4Bf,OAAO,KAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAqBN,QAAU,GACV,MAAQ,OACR,SAAW,OACX,MAAQ,OACR,YAAc,OACd,eAAiB,OAEzB,mBAAoB,CAClB,KAAK,UAAYgB,EAAK,KACtB,KAAK,MAAQ,KAAK,cAAc,QAAQ,EACxC,KAAK,SAAW,KAAK,cAAc,WAAW,EAC9C,KAAK,MAAQ,KAAK,cAAc,QAAQ,EACxC,KAAK,YAAc,KAAK,MAAM,cAAc,SAAS,EACrD,KAAK,eAAiB,KAAK,SAAS,cAAc,SAAS,EAC3D,KAAK,qBAAqB,CAC5B,CAEQ,sBAAuB,CAC7B,KAAK,MAAM,iBAAiB,SAAW,GAAM,KAAK,aAAa,EAAG,EAAK,CAAC,EACxE,KAAK,SAAS,iBAAiB,SAAW,GAAM,KAAK,aAAa,EAAG,EAAI,CAAC,EAC1E,KAAK,YAAY,iBAAiB,QAAS,IAAM,KAAK,WAAW,CAAC,EAClE,KAAK,eAAe,iBAAiB,QAAS,IAAM,KAAK,WAAW,CAAC,CACvE,CAGQ,YAAa,CACnB,KAAK,QAAU,CAAC,KAAK,QACrB,KAAK,MAAM,UAAU,OAAO,QAAQ,EACpC,KAAK,SAAS,UAAU,OAAO,QAAQ,CACzC,CAGA,MAAc,aAAa,EAAUC,EAAkB,CACrD,EAAE,eAAe,EACjB,IAAMC,EAAW,IAAI,SAAS,EAAE,MAAyB,EACnDC,EAAK,OAAO,YAAYD,CAAQ,EAEtC,GAAI,CACF,IAAME,EAAI,MAAWjB,EACnBc,MACAE,CACF,EACKf,EAAI,kBAAkBgB,EAAE,MAAM,CACrC,OAASf,EAAK,CACZ,KAAK,UACHA,aAAe,MAAQA,EAAI,QAAU,kCACvC,CACF,CACF,CAEQ,UAAUgB,EAAe,CAC/B,KAAK,MAAM,YAAcA,CAC3B,CACF,EAKMC,EAAN,MAAMC,UAAiBvB,CAAU,CAC/B,OAAO,MAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAoCf,OAAO,KAAO;AAAA;AAAA,GAKd,OAAiB,EACjB,MAAiB,GACjB,MAAkB,IAAIF,EACd,KAAO,SAAS,cAAc,WAAW,EACzC,UAAY,OACZ,MAAQ,IAAI,IACZ,SAAwB,KAEhC,mBAAoB,CAClB,KAAK,OAAS,SAAS,KAAK,aAAa,QAAQ,EAAI,EAAE,EACvD,KAAK,MAAQ,KAAK,aAAa,OAAO,IAAM,OACvC0B,EAAO,IAAI,EAChB,KAAK,UAAYD,EAAI,KACrB,KAAK,UAAY,KAAK,cAAc,gBAAgB,EACpD,KAAK,gBAAgB,CACvB,CAIA,cAAe,CAEb,KAAK,OAAS,EACd,KAAK,MAAM,MAAM,EACjB,KAAK,SAAW,KAChB,KAAK,MAAQ,IAAIzB,EAEjB,KAAK,UAAU,UAAU,IAAI,QAAQ,EACrC,KAAK,YAAY,KAAK,IAAI,CAC5B,CAIA,kBAAkB2B,EAAgB,CAChC,KAAK,OAASA,EAEd,KAAK,UAAU,UAAU,OAAO,QAAQ,EACxC,KAAK,KAAK,OAAO,EACjB,KAAK,cAAc,CACrB,CAIA,iBAAkB,CACZ,KAAK,SAAW,EAClB,KAAK,aAAa,EAElB,KAAK,kBAAkB,KAAK,MAAM,CAEtC,CAGA,MAAc,eAAgB,CAC5B,GAAI,CACF,IAAMC,EAAY,MAAM,KAAK,QAAQ,EACrC,QAAQ,IAAI,sBAAuBA,CAAS,EAC5C,KAAK,cAAcA,CAAS,EAC5B,KAAK,iBAAiB,CACxB,OAASrB,EAAK,CACZ,QAAQ,MAAM,kCAAmCA,CAAG,CAEtD,CACF,CAKA,MAAc,SAAmC,CAC/C,IAAMsB,EAAW,KAAK,MAAQ,EAAI,KAAK,OAEvC,OADa,MAAWC,IAAkBD,CAAQ,CAEpD,CAGQ,cACNE,EACA1C,EAAsB,KAChB,CACN,IAAM2C,EAAO,IAAI/C,EAAK8C,EAAM,OAAQA,EAAM,KAAM1C,CAAM,EAStD,GARA,KAAK,MAAM,IAAI2C,EAAK,GAAIA,CAAI,EAExB3C,IAAW,KACb,KAAK,SAAW2C,EAEhB3C,EAAO,SAAS,KAAK2C,CAAI,EAGvBD,EAAM,SACR,QAAWE,KAAcF,EAAM,SAC7B,KAAK,cAAcE,EAAYD,CAAI,EAIvC,OAAOA,CACT,CAIQ,kBAAmB,CACzB,GAAI,CAAC,KAAK,SAAU,OAGpB,IAAME,EAAc,KAAK,MAAQ,KAAK,SAAW,KAAK,MAAM,IAAI,KAAK,MAAM,EAC3E,GAAI,CAACA,EAAa,OAGlB,IAAMC,EAAa,IAAIvC,EAAesC,CAAW,EAEjD,QAAW5C,KAAS4C,EAAY,SAC9BC,EAAW,SAAS,IAAI7C,EAAM,EAAE,EAElC,KAAK,MAAM,UAAU,OAAO,CAAC,EAAE,UAAU,KAAK6C,CAAU,EAGxD,IAAMC,EAAc,IAAIxC,EAAesC,CAAW,EAElD,KAAK,MAAM,UAAU,OAAO,CAAC,EAAE,UAAU,KAAKE,CAAW,EAGzD,KAAK,UAAU,aAAa,CAC9B,CACF,EAIAnC,EAAS,SAAS,gBAAgB,EAClCE,EAAO,SAAS,aAAa,EAC7BK,EAAO,SAAS,aAAa,EAC7BE,EAAU,SAAS,gBAAgB,EACnCO,EAAK,SAAS,WAAW,EACzBO,EAAI,SAAS,UAAU",
  "names": ["_dollarRegexp", "$", "html", "template", "Component", "name", "styleElement", "gui", "SetGUI", "instance", "Ask", "type", "targetId", "pl", "response", "AskAuth", "Action", "Component", "Node", "_Node", "id", "name", "parent", "child", "container", "config", "element", "$", "childContainer", "ListTreeConfig", "root", "BoardConfig", "WorkbenchConfig", "GUIState", "ListTree", "Component", "Header", "_Header", "AskAuth", "gui", "err", "Footer", "_Footer", "Workbench", "_Workbench", "workbenchConfig", "i", "board", "boardConfig", "listTree", "Auth", "_Auth", "regmode", "formData", "pl", "a", "error", "GUI", "_GUI", "SetGUI", "userId", "treeEntry", "targetId", "Ask", "entry", "node", "childEntry", "displayNode", "leftConfig", "rightConfig"]
}
