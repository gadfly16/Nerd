{
  "version": 3,
  "sources": ["../src/util.ts", "../src/nerd.ts", "../src/config.ts", "../src/widgets.ts", "../src/gui.ts"],
  "sourcesContent": ["// Utility Functions\n\n// $() creates an HTMLElement from a template string\n// Strips whitespace for cleaner template literals\nconst _dollarRegexp = /^\\s+|\\s+$|(?<=\\>)\\s+(?=\\<)/gm\nexport function $(html: string): HTMLElement {\n\tconst template = document.createElement(\"template\")\n\ttemplate.innerHTML = html.replace(_dollarRegexp, \"\")\n\tconst result = template.content.firstElementChild\n\treturn result as HTMLElement\n}\n", "// Nerd Framework - Core types and base classes\n\nimport { imsg } from \"./imsg.js\"\n\n// TreeEntry represents a node and its children - Must match api/msg/types.go\nexport interface TreeEntry {\n  nodeId: number\n  name: string\n  children: TreeEntry[]\n}\n\n// GUIContext holds minimal global state needed across components\n// Simple data object - no methods, no coupling\nexport const GUIContext = {\n  userId: 0,\n  admin: false,\n}\n\n// Component provides base functionality for all custom elements\n// Uses global style injection rather than shadow DOM for simplicity\nexport class Component extends HTMLElement {\n  static style = \"\"\n\n  // register creates a global style tag and defines the custom element\n  static register(name: string) {\n    const styleElement = document.createElement(\"style\")\n    styleElement.textContent = this.style\n    document.head.appendChild(styleElement)\n    customElements.define(name, this)\n  }\n\n  // Query is a shorthand for querySelector\n  Query<T extends Element = Element>(selector: string): T | null {\n    return this.querySelector<T>(selector)\n  }\n\n  // Listen is a shorthand for addEventListener\n  Listen(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    this.addEventListener(type, listener, options)\n  }\n}\n\n// Ask sends an API message to the server and returns the response payload\n// Throws on HTTP errors or network failures\n// On 401 Unauthorized, dispatches event for security handling\nexport async function Ask(\n  type: imsg,\n  targetId: number,\n  pl: any = {},\n): Promise<any> {\n  const response = await fetch(\"/api\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ type, targetId, payload: pl }),\n  })\n\n  if (!response.ok) {\n    if (response.status === 401) {\n      window.dispatchEvent(new CustomEvent(\"nerd:unauthorized\"))\n    }\n    throw new Error((await response.text()) || \"Request failed\")\n  }\n\n  return await response.json()\n}\n\n// AskAuth sends an authentication message to the server\n// Used for login, registration, and logout\nexport async function AskAuth(type: imsg, pl: any): Promise<any> {\n  const response = await fetch(\"/auth\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ type, payload: pl }),\n  })\n\n  if (!response.ok) {\n    throw new Error((await response.text()) || \"Request failed\")\n  }\n\n  return await response.json()\n}\n\n// AskGetTree fetches the tree structure from the server\n// For admins: fetches entire tree from Root (targetId = 1)\n// For users: fetches subtree rooted at user node (targetId = userId)\nexport async function AskGetTree(targetId: number): Promise<TreeEntry> {\n  return (await Ask(imsg.GetTree, targetId)) as TreeEntry\n}\n", "// Config - GUI configuration data structures\n\n// ListTreeConfig configures a single ListTree instance\nexport class ListTree {\n  rootId!: number // Node ID to start rendering from\n  openList!: Set<number> // Node IDs whose children are visible\n  displayRoot?: number // Optional: render displayRoot at this depth (macro expanded on first render)\n}\n\n// BoardConfig holds configuration for all ListTrees on a board\nexport class Board {\n  listTrees!: ListTree[]\n}\n\n// WorkbenchConfig holds configuration for all boards in the workbench\nexport class Workbench {\n  boards!: Board[]\n}\n\n// GUIState holds the complete state of the GUI display configuration\nexport class State {\n  workbench!: Workbench\n}\n\n// Default state template\n// displayRoot macros are expanded during first render\nexport const defaultState: State = {\n  workbench: {\n    boards: [\n      {\n        listTrees: [\n          {\n            rootId: 0,\n            openList: new Set(),\n            displayRoot: 1, // Show displayRoot with depth 1\n          },\n        ],\n      },\n      {\n        listTrees: [\n          {\n            rootId: 0,\n            openList: new Set(),\n            displayRoot: 2, // Show displayRoot with depth 2\n          },\n        ],\n      },\n    ],\n  },\n}\n", "// Widgets - Reusable UI primitives used across multiple components\n\nimport * as nerd from \"./nerd.js\"\n\n// Action renders a clickable link-styled button\nexport class Action extends nerd.Component {\n  static style = `\n\t\tnerd-action {\n\t\t\tdisplay: inline;\n\t\t\tbackground: none;\n\t\t\tborder: none;\n\t\t\tcolor: #aaa;\n\t\t\ttext-decoration: underline;\n\t\t\tcursor: pointer;\n\t\t\tpadding: 0;\n\t\t\tfont-size: 0.75em;\n\t\t}\n\n\t\tnerd-action:hover {\n\t\t\tcolor: #ddd;\n\t\t}\n\t`\n}\n\n// Register all widgets\nAction.register(\"nerd-action\")\n", "// Nerd GUI - Personal Software Agent Graphical User Interface\n\nimport { imsg } from \"./imsg.js\"\nimport { $ } from \"./util.js\"\nimport * as nerd from \"./nerd.js\"\nimport * as config from \"./config.js\"\nimport \"./widgets.js\" // Side effect: registers widget components\n\n// Global GUI singleton - set during GUI.connectedCallback()\nlet gui: GUI\n\n// Node represents a node in the in-memory tree structure\n// Forms a bidirectional tree with parent/children links\nclass Node {\n  id: number\n  name: string\n  parent: Node | null\n  children: Node[]\n  elements: HTMLElement[] // DOM elements for each render (multiple trees/boards)\n\n  constructor(id: number, name: string, parent: Node | null = null) {\n    this.id = id\n    this.name = name\n    this.parent = parent\n    this.children = []\n    this.elements = []\n  }\n\n  // addChild creates child node and establishes bidirectional link\n  addChild(id: number, name: string): Node {\n    const child = new Node(id, name, this)\n    this.children.push(child)\n    return child\n  }\n\n  // collectToDepth adds node IDs from this node down to specified depth into provided set\n  collectToDepth(depth: number, ids: Set<number>) {\n    ids.add(this.id)\n    if (depth > 0) {\n      for (const child of this.children) {\n        child.collectToDepth(depth - 1, ids)\n      }\n    }\n  }\n\n  // render creates and appends a new DOM element to container\n  // recursively renders children if this node is in the config's openList\n  // returns the created element for potential future reference\n  render(container: HTMLElement, cfg: config.ListTree): HTMLElement {\n    const element = $(`<div class=\"nerd-entity\">${this.name}</div>`)\n    this.elements.push(element)\n    container.appendChild(element)\n\n    if (cfg.openList.has(this.id)) {\n      const childContainer = $(`<div class=\"nerd-children\"></div>`)\n      element.appendChild(childContainer)\n      for (const child of this.children) {\n        child.render(childContainer, cfg)\n      }\n    }\n\n    return element\n  }\n}\n\n// ListTree renders a tree as a hierarchical list of block elements\n// This is a dynamic/adaptive custom element\nclass ListTree extends nerd.Component {\n  static style = `\n\t\tnerd-list-tree {\n\t\t\tdisplay: block;\n\t\t}\n\n\t\tnerd-list-tree .nerd-entity {\n\t\t\tpadding: 0.25em;\n\t\t}\n\n\t\tnerd-list-tree .nerd-children {\n\t\t\tpadding-left: 1em;\n\t\t}\n\t`\n\n  config!: config.ListTree\n\n  // Render displays the tree using block layout\n  Render(cfg: config.ListTree) {\n    this.config = cfg\n\n    // Expand displayRoot macro if present\n    if (cfg.displayRoot !== undefined) {\n      cfg.rootId = gui.displayRoot!.id\n      cfg.openList = new Set()\n      if (cfg.displayRoot > 0) {\n        gui.displayRoot!.collectToDepth(cfg.displayRoot - 1, cfg.openList)\n      }\n      delete cfg.displayRoot\n    }\n\n    this.innerHTML = \"\"\n    const rootNode = gui.nodes.get(cfg.rootId)\n    if (rootNode) {\n      rootNode.render(this, cfg)\n    }\n  }\n}\n\n// Board is a structural component that contains multiple ListTree elements\nclass Board extends nerd.Component {\n  static style = `\n\t\tnerd-board {\n\t\t\tdisplay: block;\n\t\t\tbackground: #555;\n\t\t\tcolor: #ccc;\n\t\t}\n\t`\n\n  config!: config.Board\n\n  // Render displays all ListTrees for this board\n  Render(cfg: config.Board) {\n    this.config = cfg\n    this.innerHTML = \"\"\n\n    for (const listTreeConfig of cfg.listTrees) {\n      const listTree = document.createElement(\"nerd-list-tree\") as ListTree\n      listTree.Render(listTreeConfig)\n      this.appendChild(listTree)\n    }\n  }\n}\n\n// Parts are application-specific structural components\n\n// Header displays the app title and logout action\nclass Header extends nerd.Component {\n  static style = `\n\t\tnerd-header {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tbackground: #222;\n\t\t\tcolor: white;\n\t\t\tpadding: 1rem;\n\t\t\tfont-size: 1.2rem;\n\t\t}\n\t`\n\n  static html = `\n\t\t<span>Nerd - Personal Software Agent Framework</span>\n\t\t<nerd-action class=\"logout\">Logout</nerd-action>\n\t`\n\n  // Header instance fields\n  private logoutButton!: HTMLElement\n\n  connectedCallback() {\n    this.innerHTML = Header.html\n    this.logoutButton = this.Query(\".logout\")!\n    this.logoutButton.addEventListener(\"click\", () => this.logout())\n  }\n\n  // logout clears the HttpOnly cookie on the server and updates UI to show auth screen\n  private async logout() {\n    try {\n      await nerd.AskAuth(imsg.Logout, {})\n      gui.SwitchToAuth()\n    } catch (err) {\n      console.error(\"Logout failed:\", err)\n    }\n  }\n}\n\nclass Footer extends nerd.Component {\n  static style = `\n\t\tnerd-footer {\n\t\t\tdisplay: block;\n\t\t\tbackground: #222;\n\t\t\tcolor: white;\n\t\t\tpadding: 1rem;\n\t\t\ttext-align: center;\n\t\t}\n\t`\n\n  static html = `\n\t\tFooter\n\t`\n\n  connectedCallback() {\n    this.innerHTML = Footer.html\n  }\n}\n\n// Workbench is the main authenticated UI with header, footer, and two board areas\n// The board areas are placeholders for future agent interaction interfaces\nclass Workbench extends nerd.Component {\n  static style = `\n\t\tnerd-workbench {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: 1fr 1fr;\n\t\t\tgrid-template-rows: auto 1fr auto;\n\t\t\tgrid-template-areas:\n\t\t\t\t\"header header\"\n\t\t\t\t\"board_0 board_1\"\n\t\t\t\t\"footer footer\";\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t}\n\n\t\tnerd-workbench nerd-header {\n\t\t\tgrid-area: header;\n\t\t}\n\n\t\tnerd-workbench nerd-board.board_0 {\n\t\t\tgrid-area: board_0;\n\t\t\tborder: 0.5em solid #333;\n\t\t\tborder-width: 0.5em 0.29em 0.5em 0.5em;\n\t\t}\n\n\t\tnerd-workbench nerd-board.board_1 {\n\t\t\tgrid-area: board_1;\n\t\t\tborder: 0.5em solid #333;\n\t\t\tborder-width: 0.5em 0.5em 0.5em 0.29em;\n\t\t}\n\n\t\tnerd-workbench nerd-footer {\n\t\t\tgrid-area: footer;\n\t\t}\n\t`\n\n  static html = `\n\t\t<nerd-header></nerd-header>\n\t\t<nerd-board class=\"board_0\"></nerd-board>\n\t\t<nerd-board class=\"board_1\"></nerd-board>\n\t\t<nerd-footer></nerd-footer>\n\t`\n\n  // Workbench instance fields\n  config!: config.Workbench\n  private boardElements: Board[] = []\n\n  connectedCallback() {\n    this.innerHTML = Workbench.html\n    this.boardElements = [\n      this.Query<Board>(\"nerd-board.board_0\")!,\n      this.Query<Board>(\"nerd-board.board_1\")!,\n    ]\n  }\n\n  // Render displays all boards with their configs\n  Render(cfg: config.Workbench) {\n    this.config = cfg\n    for (let i = 0; i < this.boardElements.length; i++) {\n      this.boardElements[i].Render(cfg.boards[i])\n    }\n  }\n}\n\n// Auth provides login and registration forms with toggle between modes\n// Automatically logs in user after successful registration\nclass Auth extends nerd.Component {\n  static style = `\n\t\tnerd-auth {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t}\n\n\t\tnerd-auth .auth-box {\n\t\t\twidth: 20em;\n\t\t\tpadding: 1.5em;\n\t\t\tborder: 1px solid #ddd;\n\t\t\tborder-radius: 0.5em;\n\t\t\tbackground: #fff;\n\t\t}\n\n\t\tnerd-auth form {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tgap: 0.666em;\n\t\t}\n\n\t\tnerd-auth .error {\n\t\t\tmargin-top: 1em;\n\t\t}\n\t`\n\n  static html = `\n\t\t<div class=\"auth-box\">\n\t\t\t<form class=\"login\">\n\t\t\t\t<h2>Login</h2>\n\t\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n\t\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n\t\t\t\t<button type=\"submit\">Login</button>\n\t\t\t\t<nerd-action class=\"toggle\">Need an account? Register</nerd-action>\n\t\t\t</form>\n\t\t\t<form class=\"register hidden\">\n\t\t\t\t<h2>Create Account</h2>\n\t\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n\t\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n\t\t\t\t<button type=\"submit\">Register</button>\n\t\t\t\t<nerd-action class=\"toggle\">Have an account? Login</nerd-action>\n\t\t\t</form>\n\t\t\t<div class=\"error\"></div>\n\t\t</div>\n\t`\n\n  // Auth instance fields\n  private regmode = false\n  private login!: HTMLFormElement\n  private register!: HTMLFormElement\n  private error!: HTMLDivElement\n  private loginToggle!: HTMLElement\n  private registerToggle!: HTMLElement\n\n  connectedCallback() {\n    this.innerHTML = Auth.html\n    this.login = this.Query(\".login\")! as HTMLFormElement\n    this.register = this.Query(\".register\")! as HTMLFormElement\n    this.error = this.Query(\".error\")! as HTMLDivElement\n    this.loginToggle = this.login.querySelector(\".toggle\")! as HTMLElement\n    this.registerToggle = this.register.querySelector(\".toggle\")! as HTMLElement\n\n    // Event listeners\n    this.login.addEventListener(\"submit\", (e) => this.handleSubmit(e, false))\n    this.register.addEventListener(\"submit\", (e) => this.handleSubmit(e, true))\n    this.loginToggle.addEventListener(\"click\", () => this.toggleMode())\n    this.registerToggle.addEventListener(\"click\", () => this.toggleMode())\n  }\n\n  // toggleMode switches between login and registration forms\n  private toggleMode() {\n    this.regmode = !this.regmode\n    this.login.classList.toggle(\"hidden\")\n    this.register.classList.toggle(\"hidden\")\n  }\n\n  // handleSubmit sends credentials to server and updates app state on success\n  private async handleSubmit(e: Event, regmode: boolean) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const pl = Object.fromEntries(formData)\n\n    try {\n      const a = await nerd.AskAuth(\n        regmode ? imsg.CreateUser : imsg.AuthenticateUser,\n        pl,\n      )\n      gui.SwitchToWorkbench(a.userid)\n    } catch (err) {\n      this.showError(\n        err instanceof Error ? err.message : \"Network error. Please try again.\",\n      )\n    }\n  }\n\n  private showError(error: string) {\n    this.error.textContent = error\n  }\n}\n\n// GUI is the root component that manages authentication state\n// Shows Auth component when userId is 0, otherwise shows Workbench\n// userId is injected by server via template replacement in index.html\nclass GUI extends nerd.Component {\n  static style = `\n\t\t@font-face {\n\t\t\tfont-family: 'Inter';\n\t\t\tsrc: url('/fonts/InterVariable.woff2');\n\t\t\tfont-weight: 100 900;\n\t\t\tfont-display: block;\n\t\t}\n\n\t\tbody {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\th2 {\n\t\t\tmargin: 0 0 0.25em 0;\n\t\t\tfont-size: 1.5em;\n\t\t}\n\n\t\t.error {\n\t\t\tcolor: red;\n\t\t}\n\n\t\tnerd-gui {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t\tfont-family: 'Inter';\n\t\t\tbackground: #fff;\n\t\t}\n\n\t\t.hidden {\n\t\t\tdisplay: none;\n\t\t}\n\t`\n\n  static html = `\n\t\t<nerd-workbench></nerd-workbench>\n\t`\n\n  // GUI instance fields\n  userId: number = 0\n  admin: boolean = false\n  state: config.State = new config.State()\n  nodes = new Map<number, Node>() // Fast lookup by ID\n  displayRoot: Node | null = null\n  private auth = document.createElement(\"nerd-auth\")\n  private workbench = undefined as unknown as Workbench\n\n  connectedCallback() {\n    this.userId = parseInt(this.getAttribute(\"userid\")!, 10)\n    this.admin = this.getAttribute(\"admin\") === \"true\"\n\n    // Update global context\n    nerd.GUIContext.userId = this.userId\n    nerd.GUIContext.admin = this.admin\n\n    // Set global gui reference\n    gui = this\n\n    // Listen for unauthorized events\n    window.addEventListener(\"nerd:unauthorized\", () => this.SwitchToAuth())\n\n    this.innerHTML = GUI.html\n    this.workbench = this.Query(\"nerd-workbench\")! as Workbench\n\n    // Show auth or workbench based on initial userId\n    if (this.userId === 0) {\n      this.SwitchToAuth()\n    } else {\n      this.SwitchToWorkbench(this.userId)\n    }\n  }\n\n  // SwitchToAuth clears all sensitive data and shows authentication UI\n  // Called on logout, session expiry, or authentication failure\n  SwitchToAuth() {\n    // Clear all sensitive information\n    this.userId = 0\n    this.nodes.clear()\n    this.displayRoot = null\n    this.state = new config.State()\n\n    this.workbench.classList.add(\"hidden\")\n    this.appendChild(this.auth)\n  }\n\n  // SwitchToWorkbench sets user ID, hides auth, and loads workbench\n  // Called after successful authentication\n  SwitchToWorkbench(userId: number) {\n    this.userId = userId\n\n    this.workbench.classList.remove(\"hidden\")\n    this.auth.remove()\n    this.init()\n  }\n\n  // init loads the tree and initializes the board displays\n  private async init() {\n    try {\n      await this.buildNodeTree()\n\n      // TODO: Load saved state from localStorage\n      // const savedState: config.State | null = null\n\n      // Store config and render workbench (displayRoot macros expanded during render)\n      this.state.workbench = config.defaultState.workbench\n      this.workbench.Render(config.defaultState.workbench)\n\n      // TODO: Save state to localStorage\n    } catch (err) {\n      console.error(\"Failed to initialize workbench:\", err)\n      // TODO: Show error to user\n    }\n  }\n\n  // buildNodeTree fetches tree from server and builds Node tree structure\n  private async buildNodeTree() {\n    const targetId = this.admin ? 1 : this.userId\n    const treeEntry = await nerd.AskGetTree(targetId)\n    console.log(\"TreeEntry received:\", treeEntry)\n    this.buildNodes(treeEntry, null)\n  }\n\n  // buildNodes recursively builds Node tree from TreeEntry and populates nodes map\n  private buildNodes(entry: nerd.TreeEntry, parent: Node | null): Node {\n    const node = new Node(entry.nodeId, entry.name, parent)\n    this.nodes.set(node.id, node)\n\n    if (parent === null) {\n      this.displayRoot = node\n    } else {\n      parent.children.push(node)\n    }\n\n    if (entry.children) {\n      for (const childEntry of entry.children) {\n        this.buildNodes(childEntry, node)\n      }\n    }\n\n    return node\n  }\n}\n\n// Register all components - must happen before HTML parsing completes\n// Creates global style tags and defines custom elements\nListTree.register(\"nerd-list-tree\")\nBoard.register(\"nerd-board\")\nHeader.register(\"nerd-header\")\nFooter.register(\"nerd-footer\")\nWorkbench.register(\"nerd-workbench\")\nAuth.register(\"nerd-auth\")\nGUI.register(\"nerd-gui\")\n"],
  "mappings": "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",
  "names": ["_dollarRegexp", "$", "html", "template", "GUIContext", "Component", "name", "styleElement", "selector", "type", "listener", "options", "Ask", "targetId", "pl", "response", "AskAuth", "AskGetTree", "ListTree", "Board", "Workbench", "State", "defaultState", "Action", "Component", "gui", "Node", "_Node", "id", "name", "parent", "child", "depth", "ids", "container", "cfg", "element", "$", "childContainer", "ListTree", "Component", "rootNode", "Board", "listTreeConfig", "listTree", "Header", "_Header", "AskAuth", "err", "Footer", "_Footer", "Workbench", "_Workbench", "i", "Auth", "_Auth", "regmode", "formData", "pl", "a", "error", "GUI", "_GUI", "State", "GUIContext", "userId", "defaultState", "targetId", "treeEntry", "AskGetTree", "entry", "node", "childEntry"]
}
