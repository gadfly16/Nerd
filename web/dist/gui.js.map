{
  "version": 3,
  "sources": ["../src/nerd.ts", "../src/config.ts", "../src/widgets.ts", "../src/vertigo.ts", "../src/gui.ts"],
  "sourcesContent": ["// Nerd Framework - Core types and base classes\n\nimport { imsg } from \"./imsg.js\"\n\n// TreeRegistry is a global map of node ID to TreeEntry for fast lookups\nexport const Nodes = new Map<number, TreeEntry>()\n\n// TreeEntry represents a node and its children\n// Received as JSON from server, then initialized with parent pointers\n// Must match api/msg/types.go for nodeId field (mapped to id here)\nexport class TreeEntry {\n  id: number\n  name: string\n  children: TreeEntry[]\n  parent: TreeEntry | null = null\n\n  constructor(id: number, name: string, children: TreeEntry[] = []) {\n    this.id = id\n    this.name = name\n    this.children = children\n  }\n\n  // init converts plain JSON object to TreeEntry instances and sets parent pointers\n  // Also populates the global TreeRegistry for fast lookups\n  static init(obj: any, parent: TreeEntry | null = null): TreeEntry {\n    const entry = new TreeEntry(obj.nodeId, obj.name, [])\n    entry.parent = parent\n\n    // Register in global map\n    Nodes.set(entry.id, entry)\n\n    if (obj.children) {\n      entry.children = obj.children.map((child: any) =>\n        TreeEntry.init(child, entry),\n      )\n    }\n    return entry\n  }\n\n  // collectToDepth adds node IDs from this node down to specified depth into provided set\n  collectToDepth(depth: number, ids: Set<number>): void {\n    ids.add(this.id)\n    if (depth > 0) {\n      for (const child of this.children) {\n        child.collectToDepth(depth - 1, ids)\n      }\n    }\n  }\n}\n\n// GUIContext holds minimal global state needed across components\n// Simple data object - no methods, no coupling\nexport const GUIContext = {\n  userId: 0,\n  admin: false,\n}\n\n// Component provides base functionality for all custom elements\n// Uses global style injection rather than shadow DOM for simplicity\nexport class Component extends HTMLElement {\n  static style = \"\"\n\n  // register creates a global style tag and defines the custom element\n  static register(name: string) {\n    const styleElement = document.createElement(\"style\")\n    styleElement.textContent = this.style\n    document.head.appendChild(styleElement)\n    customElements.define(name, this)\n  }\n\n  // Query is a shorthand for querySelector\n  Query<T extends Element = Element>(selector: string): T | null {\n    return this.querySelector<T>(selector)\n  }\n\n  // Listen is a shorthand for addEventListener\n  Listen(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    this.addEventListener(type, listener, options)\n  }\n}\n\n// Ask sends an API message to the server and returns the response payload\n// Throws on HTTP errors or network failures\n// On 401 Unauthorized, dispatches event for security handling\nexport async function Ask(\n  type: imsg,\n  targetId: number,\n  pl: any = {},\n): Promise<any> {\n  const response = await fetch(\"/api\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ type, targetId, payload: pl }),\n  })\n\n  if (!response.ok) {\n    if (response.status === 401) {\n      window.dispatchEvent(new CustomEvent(\"nerd:unauthorized\"))\n    }\n    throw new Error((await response.text()) || \"Request failed\")\n  }\n\n  return await response.json()\n}\n\n// AskAuth sends an authentication message to the server\n// Used for login, registration, and logout\nexport async function AskAuth(type: imsg, pl: any): Promise<any> {\n  const response = await fetch(\"/auth\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ type, payload: pl }),\n  })\n\n  if (!response.ok) {\n    throw new Error((await response.text()) || \"Request failed\")\n  }\n\n  return await response.json()\n}\n\n// AskGetTree fetches the tree structure from the server\n// For admins: fetches entire tree from Root (targetId = 1)\n// For users: fetches subtree rooted at user node (targetId = userId)\nexport async function AskGetTree(targetId: number): Promise<TreeEntry> {\n  return (await Ask(imsg.GetTree, targetId)) as TreeEntry\n}\n\n// Create is a shorthand for document.createElement\nexport function Create(tagName: string): HTMLElement {\n  return document.createElement(tagName)\n}\n", "// Config - GUI configuration data structures\n\n// Vertigo configures a single Vertigo instance\nexport class Vertigo {\n  rootId!: number // Node ID to start rendering from\n  openMap!: Map<number, number> // Node ID -> depth (0 = stop, -1 = infinite, >0 = N levels)\n}\n\n// BoardConfig holds configuration for all Vertigo trees on a board\nexport class Board {\n  trees!: Vertigo[]\n}\n\n// WorkbenchConfig holds configuration for all boards in the workbench\nexport class Workbench {\n  boards!: Board[]\n}\n\n// GUIState holds the complete state of the GUI display configuration\nexport class State {\n  workbench!: Workbench\n}\n\n// Default state template\nexport const defaultState: State = {\n  workbench: {\n    boards: [\n      {\n        trees: [\n          {\n            rootId: 1, // Root node\n            openMap: new Map([[1, 6]]), // Open root 6 levels deep\n          },\n        ],\n      },\n      {\n        trees: [\n          {\n            rootId: 4,\n            openMap: new Map([[4, 2]]), // Open node 4, 2 levels deep\n          },\n        ],\n      },\n    ],\n  },\n}\n", "// Widgets - Reusable UI primitives used across multiple components\n\nimport * as nerd from \"./nerd.js\"\n\n// Action renders a clickable link-styled button\nexport class Action extends nerd.Component {\n  static style = `\n\t\tnerd-action {\n\t\t\tdisplay: inline;\n\t\t\tbackground: none;\n\t\t\tborder: none;\n\t\t\tcolor: #aaa;\n\t\t\ttext-decoration: underline;\n\t\t\tcursor: pointer;\n\t\t\tpadding: 0;\n\t\t\tfont-size: 0.75em;\n\t\t}\n\n\t\tnerd-action:hover {\n\t\t\tcolor: #ddd;\n\t\t}\n\t`\n}\n\n// Register all widgets\nAction.register(\"nerd-action\")\n", "// Vertigo - Hierarchical tree display design pattern\n\nimport * as nerd from \"./nerd.js\"\nimport * as config from \"./config.js\"\nimport { $ } from \"./util.js\"\n\n// Layout constants (in pixels)\nconst W_SIDEBAR = 28 // Width of sidebar/icon block (2ch \u2248 32px at 16px font)\nconst G = 6 // Gap between nodes (0.5ch \u2248 8px)\nconst I = W_SIDEBAR + G // Indentation per level (40px)\nconst W_MIN = 640 // Minimum width for content area (60ch \u2248 960px)\n\n// computeWidthFromDepth calculates required tree width from maximum depth (in pixels)\nfunction computeWidth(maxDepth: number): number {\n  return maxDepth * I + W_SIDEBAR + W_MIN - G\n}\n\n// Tree represents a displayed subtree using the Vertigo design pattern\nexport class Tree extends nerd.Component {\n  static style = `\n\t\tvertigo-tree {\n\t\t\tdisplay: block;\n\t\t\tpadding-right: ${G}px;\n\t\t}\n\t`\n\n  config!: config.Vertigo\n  root!: nerd.TreeEntry\n  rootElem!: VNode\n  private resizeObs!: ResizeObserver\n\n  connectedCallback() {\n    // Set up ResizeObserver to watch parent container\n    // Fires automatically on initial observation and whenever parent size changes\n    this.resizeObs = new ResizeObserver(() => {\n      this.updateWidth()\n    })\n  }\n\n  disconnectedCallback() {\n    // Clean up observer when removed from DOM\n    this.resizeObs?.disconnect()\n  }\n\n  // Render displays the tree using Vertigo block layout\n  Render(cfg: config.Vertigo, guiDispRoot: nerd.TreeEntry): HTMLElement {\n    this.config = cfg\n\n    // rootId: 0 means use guiDispRoot\n    if (cfg.rootId === 0) {\n      cfg.rootId = guiDispRoot.id\n    }\n\n    // Look up the tree root from registry\n    const te = nerd.Nodes.get(cfg.rootId)\n    if (!te) {\n      throw new Error(`TreeEntry with id ${cfg.rootId} not found in registry`)\n    }\n    this.root = te\n\n    // Get initial depth for root from openMap\n    const rootDepth = cfg.openMap.get(cfg.rootId) ?? 0\n\n    this.innerHTML = \"\"\n\n    // Listen for structure change events from nodes\n    this.addEventListener(\"vertigo:change\", () => this.updateWidth())\n\n    // Create root vertigo-node, add to DOM, then render\n    this.rootElem = nerd.Create(\"vertigo-node\") as VNode\n    this.appendChild(this.rootElem)\n    this.rootElem.Render(te, this.config, 0, rootDepth)\n\n    // Start observing parent - triggers initial width calculation\n    if (this.parentElement) {\n      this.resizeObs.observe(this.parentElement)\n    }\n\n    return this\n  }\n\n  // updateWidth calculates and sets the tree width based on current open state\n  // Called by ResizeObserver (parent size change) or vertigo:change event (structure change)\n  updateWidth() {\n    const maxDepth = this.rootElem.displayDepth()\n    const computedWidth = computeWidth(maxDepth)\n    const viewportWidth = (this.parentElement?.clientWidth || 0) - G\n    const width = Math.max(computedWidth, viewportWidth)\n    this.style.width = `${width}px`\n  }\n}\n\n// Open displays the clickable open/close icon at header level\nclass Open extends nerd.Component {\n  static style = `\n\t\tvertigo-open {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\twidth: ${W_SIDEBAR}px;\n\t\t\tbackground-color: #666;\n\t\t\tcursor: pointer;\n\t\t\tuser-select: none;\n\t\t\tfont-size: 0.66em;\n\t\t\tcolor: #bbb;\n\t\t}\n\t`\n}\n\n// Sidebar is the visual bar that extends below the open icon when node has children\nclass Sidebar extends nerd.Component {\n  static style = `\n\t\tvertigo-sidebar {\n\t\t\tdisplay: block;\n\t\t\twidth: ${W_SIDEBAR}px;\n\t\t\tbackground-color: #666;\n\t\t}\n\t`\n}\n\n// Header displays the node name\nclass Header extends nerd.Component {\n  static style = `\n\t\tvertigo-header {\n\t\t\tdisplay: block;\n\t\t\tbackground-color: #999;\n\t\t\tpadding: 0.2ch;\n\t\t\tpadding-left: 0.5ch;\n\t\t\tcolor: #666;\n\t\t\tfont-size: 1.2em;\n\t\t\tfont-weight: 500;\n\t\t\t}\n\t`\n}\n\n// VNode renders a single node and its children recursively\nclass VNode extends nerd.Component {\n  static style = `\n\t\tvertigo-node {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: ${W_SIDEBAR}px 1fr;\n\t\t\tgrid-template-rows: auto 1fr;\n\t\t\tmargin: ${G}px 0 0 ${G}px;\n\t\t}\n\n\t\tvertigo-node > vertigo-open {\n\t\t\tgrid-area: 1 / 1;\n\t\t}\n\n\t\tvertigo-node > vertigo-header {\n\t\t\tgrid-area: 1 / 2;\n\t\t}\n\n\t\tvertigo-node > vertigo-sidebar {\n\t\t\tgrid-area: 2 / 1;\n\t\t}\n\n\t\tvertigo-node > .details {\n\t\t\tgrid-area: 2 / 2;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t`\n\n  static html = `\n\t\t<vertigo-open></vertigo-open>\n\t\t<vertigo-header></vertigo-header>\n\t\t<vertigo-sidebar></vertigo-sidebar>\n\t\t<div class=\"details\">\n\t\t\t<div class=\"children\"></div>\n\t\t</div>\n\t`\n\n  te!: nerd.TreeEntry\n  cfg!: config.Vertigo\n  depth!: number\n  parentDispDepth!: number // Display depth passed from parent\n  childElems: VNode[] = []\n\n  // Cached DOM elements\n  open!: Open\n  header!: Header\n  sidebar!: Sidebar\n  childrenElem!: HTMLElement\n\n  connectedCallback() {\n    this.innerHTML = VNode.html\n    this.open = this.Query(\"vertigo-open\")! as Open\n    this.header = this.Query(\"vertigo-header\")! as Header\n    this.sidebar = this.Query(\"vertigo-sidebar\")! as Sidebar\n    this.childrenElem = this.Query(\".children\")!\n\n    // Attach click handler once\n    this.open.onclick = () => this.toggleOpen()\n  }\n\n  // dispDepth calculates display depth for children (0 = closed, >0 = open N levels, -1 = infinite)\n  private dispDepth(): number {\n    const OM_depth = this.cfg.openMap.get(this.te.id)\n\n    if (OM_depth !== undefined) {\n      // Node has explicit depth in map\n      if (OM_depth === 0) {\n        // Explicit stop\n        return 0\n      } else if (OM_depth === -1) {\n        // Infinite\n        return -1\n      } else {\n        // Use max of map depth or parent display depth decremented\n        return Math.max(OM_depth, this.parentDispDepth - 1)\n      }\n    } else {\n      // Neutral state - use parent display depth\n      if (this.parentDispDepth === -1) {\n        // Infinite propagates\n        return -1\n      } else if (this.parentDispDepth > 0) {\n        // Decrement\n        return this.parentDispDepth - 1\n      } else {\n        // Exhausted\n        return 0\n      }\n    }\n  }\n\n  // Render updates node state and content (works for both initial and subsequent renders)\n  Render(\n    te: nerd.TreeEntry,\n    cfg: config.Vertigo,\n    depth: number,\n    parentDispDepth: number,\n  ): void {\n    this.te = te\n    this.cfg = cfg\n    this.depth = depth\n    this.parentDispDepth = parentDispDepth\n\n    const childDispDepth = this.dispDepth()\n    const isOpen = childDispDepth !== 0\n\n    // Update icon based on openMap state\n    const OM_depth = this.cfg.openMap.get(this.te.id)\n    if (OM_depth !== undefined && OM_depth > 0) {\n      // Node has explicit depth in map\n      if (OM_depth === -1) {\n        this.open.textContent = \"\u24BE\" // Circled I for infinite\n      } else if (OM_depth <= 9) {\n        // Circled numbers 1-9 (Unicode: \u2460 = U+2460)\n        this.open.textContent = String.fromCharCode(0x2460 + OM_depth - 1)\n      } else {\n        this.open.textContent = \"\u24C2\" // Circled M for > 9\n      }\n    } else {\n      // Neutral or explicit stop - use matching circles\n      this.open.textContent = isOpen ? \"\u25EF\" : \"\u2B24\"\n    }\n\n    this.header.textContent = te.name\n\n    if (isOpen) {\n      // Should be open\n      if (this.childElems.length === 0) {\n        // Children not present - create them\n        this.createChildren()\n      }\n      // Render all children (newly created or existing)\n      for (let i = 0; i < this.childElems.length; i++) {\n        this.childElems[i].Render(\n          this.te.children[i],\n          this.cfg,\n          this.depth + 1,\n          childDispDepth,\n        )\n      }\n    } else {\n      // Should be closed\n      if (this.childElems.length > 0) {\n        // Children present - delete them\n        this.clearChildren()\n      }\n    }\n  }\n\n  // toggleOpen handles click on open/close icon\n  private toggleOpen() {\n    const isCurrentlyOpen = this.dispDepth() !== 0\n\n    if (isCurrentlyOpen) {\n      // Currently open - close it with explicit stop signal\n      this.cfg.openMap.set(this.te.id, 0)\n    } else {\n      // Currently closed - open 1 level\n      this.cfg.openMap.set(this.te.id, 1)\n    }\n\n    // Re-render from this node down\n    this.Render(this.te, this.cfg, this.depth, this.parentDispDepth)\n\n    // Notify tree that structure changed (for width recalculation)\n    this.dispatchEvent(new CustomEvent(\"vertigo:change\", { bubbles: true }))\n  }\n\n  // createChildren creates child VNode elements and adds them to DOM (assumes container is empty)\n  private createChildren() {\n    for (const child of this.te.children) {\n      const childNode = nerd.Create(\"vertigo-node\") as VNode\n      this.childrenElem.appendChild(childNode)\n      this.childElems.push(childNode)\n    }\n  }\n\n  // clearChildren removes all child nodes\n  private clearChildren() {\n    for (const child of this.childElems) {\n      child.remove()\n    }\n    this.childElems = []\n  }\n\n  // displayDepth recursively finds the maximum depth of open nodes from this node\n  displayDepth(): number {\n    let maxDepth = this.depth\n\n    // If we have rendered children, check their depths\n    if (this.childElems.length > 0) {\n      for (const child of this.childElems) {\n        const childMaxDepth = child.displayDepth()\n        maxDepth = Math.max(maxDepth, childMaxDepth)\n      }\n    }\n\n    return maxDepth\n  }\n}\n\n// Register the Vertigo components\nTree.register(\"vertigo-tree\")\nOpen.register(\"vertigo-open\")\nSidebar.register(\"vertigo-sidebar\")\nHeader.register(\"vertigo-header\")\nVNode.register(\"vertigo-node\")\n", "// Nerd GUI - Personal Software Agent Graphical User Interface\n\nimport { imsg } from \"./imsg.js\"\nimport { $ } from \"./util.js\"\nimport * as nerd from \"./nerd.js\"\nimport * as config from \"./config.js\"\nimport * as vertigo from \"./vertigo.js\"\n\n// Side effect imports to trigger component registration\nimport \"./widgets.js\"\nimport \"./vertigo.js\"\n\n// Global GUI singleton - set during GUI.connectedCallback()\nlet gui: GUI\n\n// Board is a structural component that contains multiple ListTree elements\nclass Board extends nerd.Component {\n  static style = `\n\t\tnerd-board {\n\t\t\tdisplay: block;\n\t\t\tbackground: #555;\n\t\t\tcolor: #ccc;\n\t\t\toverflow: auto;\n\t\t}\n\t`\n\n  config!: config.Board\n\n  // Render displays all Vertigo trees for this board\n  Render(cfg: config.Board) {\n    this.config = cfg\n    this.innerHTML = \"\"\n\n    for (const treeCfg of cfg.trees) {\n      const vertigoTree = nerd.Create(\"vertigo-tree\") as vertigo.Tree\n      this.appendChild(vertigoTree)\n      vertigoTree.Render(treeCfg, gui.dispRoot!)\n    }\n  }\n}\n\n// Parts are application-specific structural components\n\n// Header displays the app title and logout action\nclass Header extends nerd.Component {\n  static style = `\n\t\tnerd-header {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tbackground: #222;\n\t\t\tcolor: white;\n\t\t\tpadding: 1rem;\n\t\t\tfont-size: 1.2rem;\n\t\t}\n\t`\n\n  static html = `\n\t\t<span>Nerd - Personal Software Agent Framework</span>\n\t\t<nerd-action class=\"logout\">Logout</nerd-action>\n\t`\n\n  // Header instance fields\n  private logoutButton!: HTMLElement\n\n  connectedCallback() {\n    this.innerHTML = Header.html\n    this.logoutButton = this.Query(\".logout\")!\n    this.logoutButton.addEventListener(\"click\", () => this.logout())\n  }\n\n  // logout clears the HttpOnly cookie on the server and updates UI to show auth screen\n  private async logout() {\n    try {\n      await nerd.AskAuth(imsg.Logout, {})\n      gui.SwitchToAuth()\n    } catch (err) {\n      console.error(\"Logout failed:\", err)\n    }\n  }\n}\n\nclass Footer extends nerd.Component {\n  static style = `\n\t\tnerd-footer {\n\t\t\tdisplay: block;\n\t\t\tbackground: #222;\n\t\t\tcolor: white;\n\t\t\tpadding: 1rem;\n\t\t\ttext-align: center;\n\t\t}\n\t`\n\n  static html = `\n\t\tFooter\n\t`\n\n  connectedCallback() {\n    this.innerHTML = Footer.html\n  }\n}\n\n// Workbench is the main authenticated UI with header, footer, and two board areas\n// The board areas are placeholders for future agent interaction interfaces\nclass Workbench extends nerd.Component {\n  static style = `\n\t\tnerd-workbench {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: 1fr 1fr;\n\t\t\tgrid-template-rows: auto 1fr auto;\n\t\t\tgrid-template-areas:\n\t\t\t\t\"header header\"\n\t\t\t\t\"board_0 board_1\"\n\t\t\t\t\"footer footer\";\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t}\n\n\t\tnerd-workbench nerd-header {\n\t\t\tgrid-area: header;\n\t\t}\n\n\t\tnerd-workbench nerd-board.board_0 {\n\t\t\tgrid-area: board_0;\n\t\t\tborder: 0.5em solid #333;\n\t\t\tborder-width: 0.5em 0.29em 0.5em 0.5em;\n\t\t}\n\n\t\tnerd-workbench nerd-board.board_1 {\n\t\t\tgrid-area: board_1;\n\t\t\tborder: 0.5em solid #333;\n\t\t\tborder-width: 0.5em 0.5em 0.5em 0.29em;\n\t\t}\n\n\t\tnerd-workbench nerd-footer {\n\t\t\tgrid-area: footer;\n\t\t}\n\t`\n\n  static html = `\n\t\t<nerd-header></nerd-header>\n\t\t<nerd-board class=\"board_0\"></nerd-board>\n\t\t<nerd-board class=\"board_1\"></nerd-board>\n\t\t<nerd-footer></nerd-footer>\n\t`\n\n  // Workbench instance fields\n  config!: config.Workbench\n  private boardElements: Board[] = []\n\n  connectedCallback() {\n    this.innerHTML = Workbench.html\n    this.boardElements = [\n      this.Query<Board>(\"nerd-board.board_0\")!,\n      this.Query<Board>(\"nerd-board.board_1\")!,\n    ]\n  }\n\n  // Render displays all boards with their configs\n  Render(cfg: config.Workbench) {\n    this.config = cfg\n    for (let i = 0; i < this.boardElements.length; i++) {\n      this.boardElements[i].Render(cfg.boards[i])\n    }\n  }\n}\n\n// Auth provides login and registration forms with toggle between modes\n// Automatically logs in user after successful registration\nclass Auth extends nerd.Component {\n  static style = `\n\t\tnerd-auth {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t}\n\n\t\tnerd-auth .auth-box {\n\t\t\twidth: 20em;\n\t\t\tpadding: 1.5em;\n\t\t\tborder: 1px solid #ddd;\n\t\t\tborder-radius: 0.5em;\n\t\t\tbackground: #fff;\n\t\t}\n\n\t\tnerd-auth form {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tgap: 0.666em;\n\t\t}\n\n\t\tnerd-auth .error {\n\t\t\tmargin-top: 1em;\n\t\t}\n\t`\n\n  static html = `\n\t\t<div class=\"auth-box\">\n\t\t\t<form class=\"login\">\n\t\t\t\t<h2>Login</h2>\n\t\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n\t\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n\t\t\t\t<button type=\"submit\">Login</button>\n\t\t\t\t<nerd-action class=\"toggle\">Need an account? Register</nerd-action>\n\t\t\t</form>\n\t\t\t<form class=\"register hidden\">\n\t\t\t\t<h2>Create Account</h2>\n\t\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n\t\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n\t\t\t\t<button type=\"submit\">Register</button>\n\t\t\t\t<nerd-action class=\"toggle\">Have an account? Login</nerd-action>\n\t\t\t</form>\n\t\t\t<div class=\"error\"></div>\n\t\t</div>\n\t`\n\n  // Auth instance fields\n  private regmode = false\n  private login!: HTMLFormElement\n  private register!: HTMLFormElement\n  private error!: HTMLDivElement\n  private loginToggle!: HTMLElement\n  private registerToggle!: HTMLElement\n\n  connectedCallback() {\n    this.innerHTML = Auth.html\n    this.login = this.Query(\".login\")! as HTMLFormElement\n    this.register = this.Query(\".register\")! as HTMLFormElement\n    this.error = this.Query(\".error\")! as HTMLDivElement\n    this.loginToggle = this.login.querySelector(\".toggle\")! as HTMLElement\n    this.registerToggle = this.register.querySelector(\".toggle\")! as HTMLElement\n\n    // Event listeners\n    this.login.addEventListener(\"submit\", (e) => this.handleSubmit(e, false))\n    this.register.addEventListener(\"submit\", (e) => this.handleSubmit(e, true))\n    this.loginToggle.addEventListener(\"click\", () => this.toggleMode())\n    this.registerToggle.addEventListener(\"click\", () => this.toggleMode())\n  }\n\n  // toggleMode switches between login and registration forms\n  private toggleMode() {\n    this.regmode = !this.regmode\n    this.login.classList.toggle(\"hidden\")\n    this.register.classList.toggle(\"hidden\")\n  }\n\n  // handleSubmit sends credentials to server and updates app state on success\n  private async handleSubmit(e: Event, regmode: boolean) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const pl = Object.fromEntries(formData)\n\n    try {\n      const a = await nerd.AskAuth(\n        regmode ? imsg.CreateUser : imsg.AuthenticateUser,\n        pl,\n      )\n      gui.SwitchToWorkbench(a.userid)\n    } catch (err) {\n      this.showError(\n        err instanceof Error ? err.message : \"Network error. Please try again.\",\n      )\n    }\n  }\n\n  private showError(error: string) {\n    this.error.textContent = error\n  }\n}\n\n// GUI is the root component that manages authentication state\n// Shows Auth component when userId is 0, otherwise shows Workbench\n// userId is injected by server via template replacement in index.html\nclass GUI extends nerd.Component {\n  static style = `\n\t\t@font-face {\n\t\t\tfont-family: 'Inter';\n\t\t\tsrc: url('/fonts/InterVariable.woff2');\n\t\t\tfont-weight: 100 900;\n\t\t\tfont-display: block;\n\t\t}\n\n\t\tbody {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\th2 {\n\t\t\tmargin: 0 0 0.25em 0;\n\t\t\tfont-size: 1.5em;\n\t\t}\n\n\t\t.error {\n\t\t\tcolor: red;\n\t\t}\n\n\t\tnerd-gui {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t\tfont-family: 'Inter';\n\t\t\tbackground: #fff;\n\t\t}\n\n\t\t.hidden {\n\t\t\tdisplay: none;\n\t\t}\n\t`\n\n  static html = `\n\t\t<nerd-workbench></nerd-workbench>\n\t`\n\n  // GUI instance fields\n  userId: number = 0\n  admin: boolean = false\n  state: config.State = new config.State()\n  dispRoot: nerd.TreeEntry | null = null\n  private auth = nerd.Create(\"nerd-auth\") as Auth\n  private workbench!: Workbench\n\n  connectedCallback() {\n    this.userId = parseInt(this.getAttribute(\"userid\")!, 10)\n    this.admin = this.getAttribute(\"admin\") === \"true\"\n\n    // Update global context\n    nerd.GUIContext.userId = this.userId\n    nerd.GUIContext.admin = this.admin\n\n    // Set global gui reference\n    gui = this\n\n    // Listen for unauthorized events\n    window.addEventListener(\"nerd:unauthorized\", () => this.SwitchToAuth())\n\n    this.innerHTML = GUI.html\n    this.workbench = this.Query(\"nerd-workbench\")! as Workbench\n\n    // Show auth or workbench based on initial userId\n    if (this.userId === 0) {\n      this.SwitchToAuth()\n    } else {\n      this.SwitchToWorkbench(this.userId)\n    }\n  }\n\n  // SwitchToAuth clears all sensitive data and shows authentication UI\n  // Called on logout, session expiry, or authentication failure\n  SwitchToAuth() {\n    // Clear all sensitive information\n    this.userId = 0\n    this.dispRoot = null\n    this.state = new config.State()\n    nerd.Nodes.clear()\n\n    this.workbench.classList.add(\"hidden\")\n    this.appendChild(this.auth)\n  }\n\n  // SwitchToWorkbench sets user ID, hides auth, and loads workbench\n  // Called after successful authentication\n  SwitchToWorkbench(userId: number) {\n    this.userId = userId\n\n    this.workbench.classList.remove(\"hidden\")\n    this.auth.remove()\n    this.init()\n  }\n\n  // init loads the tree and initializes the board displays\n  private async init() {\n    try {\n      await this.buildNodeTree()\n\n      // TODO: Load saved state from localStorage\n      // const savedState: config.State | null = null\n\n      // Store config and render workbench (displayRoot macros expanded during render)\n      this.state.workbench = config.defaultState.workbench\n      this.workbench.Render(config.defaultState.workbench)\n\n      // TODO: Save state to localStorage\n    } catch (err) {\n      console.error(\"Failed to initialize workbench:\", err)\n      // TODO: Show error to user\n    }\n  }\n\n  // buildNodeTree fetches tree from server and initializes it with parent pointers\n  private async buildNodeTree() {\n    const targetId = this.admin ? 1 : this.userId\n    const data = await nerd.AskGetTree(targetId)\n    console.log(\"TreeEntry received:\", data)\n    this.dispRoot = nerd.TreeEntry.init(data)\n  }\n}\n\n// Register all components - must happen before HTML parsing completes\n// Creates global style tags and defines custom elements\nBoard.register(\"nerd-board\")\nHeader.register(\"nerd-header\")\nFooter.register(\"nerd-footer\")\nWorkbench.register(\"nerd-workbench\")\nAuth.register(\"nerd-auth\")\nGUI.register(\"nerd-gui\")\n"],
  "mappings": "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",
  "names": ["Nodes", "TreeEntry", "_TreeEntry", "id", "name", "children", "obj", "parent", "entry", "child", "depth", "ids", "GUIContext", "Component", "styleElement", "selector", "type", "listener", "options", "Ask", "targetId", "pl", "response", "AskAuth", "AskGetTree", "Create", "tagName", "Vertigo", "Board", "Workbench", "State", "defaultState", "Action", "Component", "W_SIDEBAR", "G", "I", "W_MIN", "computeWidth", "maxDepth", "Tree", "Component", "cfg", "guiDispRoot", "te", "Nodes", "rootDepth", "Create", "computedWidth", "viewportWidth", "width", "Open", "Sidebar", "Header", "VNode", "_VNode", "OM_depth", "depth", "parentDispDepth", "childDispDepth", "isOpen", "i", "child", "childNode", "childMaxDepth", "gui", "Board", "Component", "cfg", "treeCfg", "vertigoTree", "Create", "Header", "_Header", "AskAuth", "err", "Footer", "_Footer", "Workbench", "_Workbench", "i", "Auth", "_Auth", "regmode", "formData", "pl", "a", "error", "GUI", "_GUI", "State", "GUIContext", "Nodes", "userId", "defaultState", "targetId", "data", "AskGetTree", "TreeEntry"]
}
