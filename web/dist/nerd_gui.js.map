{
  "version": 3,
  "sources": ["../src/nerd_gui.ts"],
  "sourcesContent": ["// Nerd GUI - Personal Software Agent Graphical User Interface\n\n// Interface Message Types - Must match internal/imsg/imsg.go\nenum imsg {\n  GetTree = 0,\n  CreateChild,\n  RenameChild,\n  Shutdown,\n  AuthenticateUser,\n  CreateUser,\n  Logout,\n}\n\n// TreeEntry represents a node and its children - Must match api/msg/types.go\ninterface TreeEntry {\n  nodeId: number\n  name: string\n  children: TreeEntry[]\n}\n\n// Node represents a node in the in-memory tree structure\n// Forms a bidirectional tree with parent/children links\nclass Node {\n  id: number\n  name: string\n  parent: Node | null\n  children: Node[]\n  element: HTMLElement | null // Cached DOM element when rendered\n\n  constructor(id: number, name: string, parent: Node | null = null) {\n    this.id = id\n    this.name = name\n    this.parent = parent\n    this.children = []\n    this.element = null\n  }\n\n  // addChild creates child node and establishes bidirectional link\n  addChild(id: number, name: string): Node {\n    const child = new Node(id, name, this)\n    this.children.push(child)\n    return child\n  }\n\n  // render appends this node to container and recursively renders children\n  // unless this node is in the display config's stop list\n  render(container: HTMLElement, config: DisplayConfig) {\n    if (!this.element) {\n      this.element = $(`<div class=\"nerd-entity\">${this.name}</div>`)\n    }\n    container.appendChild(this.element)\n\n    if (!config.stopList.has(this.id)) {\n      const childContainer = $(`<div class=\"nerd-children\"></div>`)\n      this.element.appendChild(childContainer)\n      for (const child of this.children) {\n        child.render(childContainer, config)\n      }\n    }\n  }\n}\n\n// DisplayConfig controls how a tree is displayed\nclass DisplayConfig {\n  stopList: Map<number, Node>\n\n  constructor() {\n    this.stopList = new Map()\n  }\n}\n\n// Tree represents a subtree view with its display configuration\nclass Tree {\n  root: Node\n  config: DisplayConfig\n\n  constructor(root: Node) {\n    this.root = root\n    this.config = new DisplayConfig()\n  }\n\n  // render renders the tree into a container using the display config\n  render(container: HTMLElement) {\n    this.root.render(container, this.config)\n  }\n}\n\n// Board contains multiple tree views\nclass Board {\n  trees: Tree[]\n\n  constructor() {\n    this.trees = []\n  }\n\n  addTree(tree: Tree) {\n    this.trees.push(tree)\n  }\n}\n\n// $() creates an HTMLElement from a template string\n// Strips whitespace for cleaner template literals\nconst _dollarRegexp = /^\\s+|\\s+$|(?<=\\>)\\s+(?=\\<)/gm\nfunction $(html: string): HTMLElement {\n  const template = document.createElement(\"template\")\n  template.innerHTML = html.replace(_dollarRegexp, \"\")\n  const result = template.content.firstElementChild\n  return result as HTMLElement\n}\n\n// ask sends a message to the server and returns the response payload\n// Throws on HTTP errors or network failures\nasync function ask(type: imsg, pl: any): Promise<any> {\n  const response = await fetch(\"/auth\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ type, payload: pl }),\n  })\n\n  if (!response.ok) {\n    throw new Error((await response.text()) || \"Request failed\")\n  }\n\n  return await response.json()\n}\n\n// NerdComponent provides base functionality for all custom elements\n// Uses global style injection rather than shadow DOM for simplicity\nclass NerdComponent extends HTMLElement {\n  static style = \"\"\n\n  // register creates a global style tag and defines the custom element\n  static register(name: string) {\n    const styleElement = document.createElement(\"style\")\n    styleElement.textContent = this.style\n    document.head.appendChild(styleElement)\n    customElements.define(name, this)\n  }\n}\n\n// Widgets are reusable UI primitives used across multiple components\n\n// Action renders a clickable link-styled button\nclass Action extends NerdComponent {\n  static style = `\n\t\tnerd-action {\n\t\t\tdisplay: inline;\n\t\t\tbackground: none;\n\t\t\tborder: none;\n\t\t\tcolor: #0066cc;\n\t\t\ttext-decoration: underline;\n\t\t\tcursor: pointer;\n\t\t\tpadding: 0;\n\t\t\tfont: inherit;\n\t\t}\n\n\t\tnerd-action:hover {\n\t\t\tcolor: #0052a3;\n\t\t}\n\t`\n}\n\n// Parts are application-specific structural components\n\n// Header displays the app title and logout action\nclass Header extends NerdComponent {\n  static style = `\n\t\tnerd-header {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tbackground: #2c3e50;\n\t\t\tcolor: white;\n\t\t\tpadding: 1rem;\n\t\t\tfont-size: 1.2rem;\n\t\t\tfont-weight: bold;\n\t\t}\n\n\t\tnerd-header nerd-action {\n\t\t\tcolor: white;\n\t\t}\n\n\t\tnerd-header nerd-action:hover {\n\t\t\tcolor: #ddd;\n\t\t}\n\t`\n\n  static html = `\n\t\t<span>Nerd - Personal Software Agent Framework</span>\n\t\t<nerd-action class=\"logout\">Logout</nerd-action>\n\t`\n\n  connectedCallback() {\n    this.innerHTML = Header.html\n    this.querySelector(\".logout\")!.addEventListener(\"click\", () =>\n      this.logout(),\n    )\n  }\n\n  // logout clears the HttpOnly cookie on the server and updates UI to show auth screen\n  private async logout() {\n    try {\n      await ask(imsg.Logout, {})\n      nerd.gui.userId = 0\n      nerd.gui.updateAuthState()\n    } catch (err) {\n      console.error(\"Logout failed:\", err)\n    }\n  }\n}\n\nclass Footer extends NerdComponent {\n  static style = `\n\t\tnerd-footer {\n\t\t\tdisplay: block;\n\t\t\tbackground: #2c3e50;\n\t\t\tcolor: white;\n\t\t\tpadding: 1rem;\n\t\t\ttext-align: center;\n\t\t}\n\t`\n\n  static html = `\n\t\tFooter\n\t`\n\n  connectedCallback() {\n    this.innerHTML = Footer.html\n  }\n}\n\n// Workbench is the main authenticated UI with header, footer, and two board areas\n// The board areas are placeholders for future agent interaction interfaces\nclass Workbench extends NerdComponent {\n  static style = `\n\t\tnerd-workbench {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: 1fr 1fr;\n\t\t\tgrid-template-rows: auto 1fr auto;\n\t\t\tgrid-template-areas:\n\t\t\t\t\"header header\"\n\t\t\t\t\"left right\"\n\t\t\t\t\"footer footer\";\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t}\n\n\t\tnerd-workbench nerd-header {\n\t\t\tgrid-area: header;\n\t\t}\n\n\t\tnerd-workbench .board.left {\n\t\t\tgrid-area: left;\n\t\t\tborder: 1px solid #ddd;\n\t\t}\n\n\t\tnerd-workbench .board.right {\n\t\t\tgrid-area: right;\n\t\t\tborder: 1px solid #ddd;\n\t\t}\n\n\t\tnerd-workbench nerd-footer {\n\t\t\tgrid-area: footer;\n\t\t}\n\t`\n\n  static html = `\n\t\t<nerd-header></nerd-header>\n\t\t<div class=\"board left\"></div>\n\t\t<div class=\"board right\"></div>\n\t\t<nerd-footer></nerd-footer>\n\t`\n\n  // Workbench instance fields\n  boards: Board[] = []\n  private leftContainer!: HTMLElement\n  private rightContainer!: HTMLElement\n\n  connectedCallback() {\n    this.innerHTML = Workbench.html\n    this.leftContainer = this.querySelector(\".board.left\")!\n    this.rightContainer = this.querySelector(\".board.right\")!\n\n    // Initialize two boards\n    this.boards = [new Board(), new Board()]\n  }\n\n  // renderBoards renders all trees on both boards\n  renderBoards() {\n    // Clear containers\n    this.leftContainer.innerHTML = \"\"\n    this.rightContainer.innerHTML = \"\"\n\n    // Render left board (index 0)\n    for (const tree of this.boards[0].trees) {\n      tree.render(this.leftContainer)\n    }\n\n    // Render right board (index 1)\n    for (const tree of this.boards[1].trees) {\n      tree.render(this.rightContainer)\n    }\n  }\n}\n\n// Auth provides login and registration forms with toggle between modes\n// Automatically logs in user after successful registration\nclass Auth extends NerdComponent {\n  static style = `\n\t\tnerd-auth {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t}\n\n\t\tnerd-auth .auth-box {\n\t\t\twidth: 20em;\n\t\t\tpadding: 1.5em;\n\t\t\tborder: 1px solid #ddd;\n\t\t\tborder-radius: 0.5em;\n\t\t\tbackground: white;\n\t\t}\n\n\t\tnerd-auth form {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tgap: 0.666em;\n\t\t}\n\n\t\tnerd-auth .error {\n\t\t\tmargin-top: 1em;\n\t\t}\n\t`\n\n  static html = `\n\t\t<div class=\"auth-box\">\n\t\t\t<form class=\"login\">\n\t\t\t\t<h2>Login</h2>\n\t\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n\t\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n\t\t\t\t<button type=\"submit\">Login</button>\n\t\t\t\t<nerd-action class=\"toggle\">Need an account? Register</nerd-action>\n\t\t\t</form>\n\t\t\t<form class=\"register hidden\">\n\t\t\t\t<h2>Create Account</h2>\n\t\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n\t\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n\t\t\t\t<button type=\"submit\">Register</button>\n\t\t\t\t<nerd-action class=\"toggle\">Have an account? Login</nerd-action>\n\t\t\t</form>\n\t\t\t<div class=\"error\"></div>\n\t\t</div>\n\t`\n\n  // Auth instance fields\n  private regmode = false\n  private login = undefined as unknown as HTMLFormElement\n  private register = undefined as unknown as HTMLFormElement\n  private error = undefined as unknown as HTMLDivElement\n\n  connectedCallback() {\n    this.innerHTML = Auth.html\n    this.login = this.querySelector(\".login\")!\n    this.register = this.querySelector(\".register\")!\n    this.error = this.querySelector(\".error\")!\n    this.attachEventListeners()\n  }\n\n  private attachEventListeners() {\n    this.login.addEventListener(\"submit\", (e) => this.handleSubmit(e, false))\n    this.register.addEventListener(\"submit\", (e) => this.handleSubmit(e, true))\n    this.login\n      .querySelector(\".toggle\")!\n      .addEventListener(\"click\", () => this.toggleMode())\n    this.register\n      .querySelector(\".toggle\")!\n      .addEventListener(\"click\", () => this.toggleMode())\n  }\n\n  // toggleMode switches between login and registration forms\n  private toggleMode() {\n    this.regmode = !this.regmode\n    this.login.classList.toggle(\"hidden\")\n    this.register.classList.toggle(\"hidden\")\n  }\n\n  // handleSubmit sends credentials to server and updates app state on success\n  private async handleSubmit(e: Event, regmode: boolean) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const pl = Object.fromEntries(formData)\n\n    try {\n      const a = await ask(regmode ? imsg.CreateUser : imsg.AuthenticateUser, pl)\n      nerd.gui.userId = a.userid\n      nerd.gui.updateAuthState()\n    } catch (err) {\n      this.showError(\n        err instanceof Error ? err.message : \"Network error. Please try again.\",\n      )\n    }\n  }\n\n  private showError(error: string) {\n    this.error.textContent = error\n  }\n}\n\n// GUI is the root component that manages authentication state\n// Shows Auth component when userId is 0, otherwise shows Workbench\n// userId is injected by server via template replacement in index.html\nclass GUI extends NerdComponent {\n  static style = `\n\t\t@font-face {\n\t\t\tfont-family: 'Inter';\n\t\t\tsrc: url('/fonts/InterVariable.woff2');\n\t\t\tfont-weight: 100 900;\n\t\t\tfont-display: block;\n\t\t}\n\n\t\tbody {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\th2 {\n\t\t\tmargin: 0 0 0.25em 0;\n\t\t\tfont-size: 1.5em;\n\t\t}\n\n\t\t.error {\n\t\t\tcolor: red;\n\t\t}\n\n\t\tnerd-gui {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t\tfont-family: 'Inter';\n\t\t\tbackground: #fafafa;\n\t\t}\n\n\t\t.hidden {\n\t\t\tdisplay: none;\n\t\t}\n\t`\n\n  static html = `\n\t\t<nerd-workbench></nerd-workbench>\n\t`\n\n  // GUI instance fields\n  userId: number = 0\n  admin: boolean = false\n  private auth = document.createElement(\"nerd-auth\")\n  private nodes = new Map<number, Node>() // Fast lookup by ID\n  private rootNode: Node | null = null\n\n  connectedCallback() {\n    this.userId = parseInt(this.getAttribute(\"userid\")!, 10)\n    this.admin = this.getAttribute(\"admin\") === \"true\"\n    nerd.gui = this // Register as singleton for global access\n    this.innerHTML = GUI.html\n    this.updateAuthState()\n  }\n\n  // updateAuthState toggles between auth and workbench based on userId\n  // Called after login/logout to update the UI\n  updateAuthState() {\n    const workbench = this.querySelector(\"nerd-workbench\")!\n\n    if (this.userId === 0) {\n      workbench.classList.add(\"hidden\")\n      this.appendChild(this.auth)\n    } else {\n      workbench.classList.remove(\"hidden\")\n      this.auth.remove()\n      this.initWorkbench()\n    }\n  }\n\n  // initWorkbench loads the tree and initializes the board displays\n  private async initWorkbench() {\n    try {\n      const treeEntry = await this.getTree()\n      this.buildNodeTree(treeEntry)\n      this.setupDefaultView()\n    } catch (err) {\n      console.error(\"Failed to initialize workbench:\", err)\n      // TODO: Show error to user\n    }\n  }\n\n  // getTree fetches the tree structure from the server\n  // For admins: returns entire tree from Root\n  // For users: returns subtree rooted at user node\n  private async getTree(): Promise<TreeEntry> {\n    const targetId = this.admin ? 1 : this.userId\n    const tree = await ask(imsg.GetTree, { targetId })\n    return tree as TreeEntry\n  }\n\n  // buildNodeTree recursively builds Node tree from TreeEntry and populates nodes map\n  private buildNodeTree(entry: TreeEntry, parent: Node | null = null): Node {\n    const node = new Node(entry.nodeId, entry.name, parent)\n    this.nodes.set(node.id, node)\n\n    if (parent === null) {\n      this.rootNode = node\n    } else {\n      parent.children.push(node)\n    }\n\n    for (const childEntry of entry.children) {\n      this.buildNodeTree(childEntry, node)\n    }\n\n    return node\n  }\n\n  // setupDefaultView creates default board/tree configuration\n  // Default: both boards show user node with 1 level depth (children in stop list)\n  private setupDefaultView() {\n    if (!this.rootNode) return\n\n    const workbench = this.querySelector(\"nerd-workbench\") as Workbench\n    if (!workbench) return\n\n    // Find user node (for admins, use root; for users, use their node)\n    const displayNode = this.admin ? this.rootNode : this.nodes.get(this.userId)\n    if (!displayNode) return\n\n    // Create tree for left board\n    const leftTree = new Tree(displayNode)\n    // Add immediate children to stop list (show 1 level depth)\n    for (const child of displayNode.children) {\n      leftTree.config.stopList.set(child.id, child)\n    }\n    workbench.boards[0].addTree(leftTree)\n\n    // Create tree for right board (same as left)\n    const rightTree = new Tree(displayNode)\n    for (const child of displayNode.children) {\n      rightTree.config.stopList.set(child.id, child)\n    }\n    workbench.boards[1].addTree(rightTree)\n\n    // Render both boards\n    workbench.renderBoards()\n  }\n}\n\n// Export namespace - provides unified access to components and API\n// gui field is set during GUI.connectedCallback() for singleton access\nconst nerd = {\n  NerdComponent,\n  Action,\n  Header,\n  Footer,\n  Workbench,\n  Auth,\n  GUI,\n  gui: undefined as unknown as GUI, // Set at runtime by GUI component\n  ask,\n  imsg,\n}\n\nexport default nerd\n\n// Register all components - must happen before HTML parsing completes\n// Creates global style tags and defines custom elements\nAction.register(\"nerd-action\")\nHeader.register(\"nerd-header\")\nFooter.register(\"nerd-footer\")\nWorkbench.register(\"nerd-workbench\")\nAuth.register(\"nerd-auth\")\nGUI.register(\"nerd-gui\")\n"],
  "mappings": "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",
  "names": ["imsg", "Node", "_Node", "id", "name", "parent", "child", "container", "config", "$", "childContainer", "DisplayConfig", "Tree", "root", "Board", "tree", "_dollarRegexp", "html", "template", "ask", "type", "pl", "response", "NerdComponent", "styleElement", "Action", "Header", "_Header", "nerd", "err", "Footer", "_Footer", "Workbench", "_Workbench", "Auth", "_Auth", "regmode", "formData", "a", "error", "GUI", "_GUI", "workbench", "treeEntry", "targetId", "entry", "node", "childEntry", "displayNode", "leftTree", "rightTree", "nerd_gui_default"]
}
